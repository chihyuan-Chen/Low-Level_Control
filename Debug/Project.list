
HW7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080050fc  080050fc  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050fc  080050fc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fc4  20000008  0800510c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fcc  0800510c  00023fcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaca  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e2  00000000  00000000  0002eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000311e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00031f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a50  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4cb  00000000  00000000  00056650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c7f  00000000  00000000  00062b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b79a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  0012b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000008 	.word	0x20000008
 800021c:	00000000 	.word	0x00000000
 8000220:	08005068 	.word	0x08005068

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000000c 	.word	0x2000000c
 800023c:	08005068 	.word	0x08005068

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a06      	ldr	r2, [pc, #24]	; (8000270 <vApplicationGetIdleTaskMemory+0x30>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000024 	.word	0x20000024
 8000270:	20000078 	.word	0x20000078

08000274 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000280:	4907      	ldr	r1, [pc, #28]	; (80002a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4313      	orrs	r3, r2
 8000286:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4013      	ands	r3, r2
 8000290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000292:	68fb      	ldr	r3, [r7, #12]
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40023800 	.word	0x40023800

080002a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	041a      	lsls	r2, r3, #16
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	619a      	str	r2, [r3, #24]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
	...

080002c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80002da:	2010      	movs	r0, #16
 80002dc:	f7ff ffca 	bl	8000274 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80002e0:	2020      	movs	r0, #32
 80002e2:	f7ff ffc7 	bl	8000274 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80002e6:	2008      	movs	r0, #8
 80002e8:	f7ff ffc4 	bl	8000274 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80002ec:	2002      	movs	r0, #2
 80002ee:	f7ff ffc1 	bl	8000274 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_4);
 80002f2:	2110      	movs	r1, #16
 80002f4:	4828      	ldr	r0, [pc, #160]	; (8000398 <MX_GPIO_Init+0xd4>)
 80002f6:	f7ff ffd5 	bl	80002a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_5);
 80002fa:	2120      	movs	r1, #32
 80002fc:	4826      	ldr	r0, [pc, #152]	; (8000398 <MX_GPIO_Init+0xd4>)
 80002fe:	f7ff ffd1 	bl	80002a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_6);
 8000302:	2140      	movs	r1, #64	; 0x40
 8000304:	4824      	ldr	r0, [pc, #144]	; (8000398 <MX_GPIO_Init+0xd4>)
 8000306:	f7ff ffcd 	bl	80002a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_8);
 800030a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030e:	4823      	ldr	r0, [pc, #140]	; (800039c <MX_GPIO_Init+0xd8>)
 8000310:	f7ff ffc8 	bl	80002a4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000314:	2310      	movs	r3, #16
 8000316:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000318:	2301      	movs	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000328:	463b      	mov	r3, r7
 800032a:	4619      	mov	r1, r3
 800032c:	481a      	ldr	r0, [pc, #104]	; (8000398 <MX_GPIO_Init+0xd4>)
 800032e:	f001 fd3b 	bl	8001da8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000332:	2320      	movs	r3, #32
 8000334:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000336:	2301      	movs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000346:	463b      	mov	r3, r7
 8000348:	4619      	mov	r1, r3
 800034a:	4813      	ldr	r0, [pc, #76]	; (8000398 <MX_GPIO_Init+0xd4>)
 800034c:	f001 fd2c 	bl	8001da8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000350:	2340      	movs	r3, #64	; 0x40
 8000352:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000354:	2301      	movs	r3, #1
 8000356:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000364:	463b      	mov	r3, r7
 8000366:	4619      	mov	r1, r3
 8000368:	480b      	ldr	r0, [pc, #44]	; (8000398 <MX_GPIO_Init+0xd4>)
 800036a:	f001 fd1d 	bl	8001da8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800036e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000372:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000374:	2301      	movs	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_GPIO_Init+0xd8>)
 800038a:	f001 fd0d 	bl	8001da8 <LL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	40021400 	.word	0x40021400

080003a0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_I2C_SetOwnAddress2+0x2c>)
 80003f2:	4013      	ands	r3, r2
 80003f4:	68b9      	ldr	r1, [r7, #8]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	60da      	str	r2, [r3, #12]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	fffff801 	.word	0xfffff801

08000410 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	60da      	str	r2, [r3, #12]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	605a      	str	r2, [r3, #4]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <LL_AHB1_GRP1_EnableClock>:
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4013      	ands	r3, r2
 800046c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40023800 	.word	0x40023800

08000480 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800048c:	4907      	ldr	r1, [pc, #28]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40023800 	.word	0x40023800

080004b0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08e      	sub	sp, #56	; 0x38
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80004da:	2002      	movs	r0, #2
 80004dc:	f7ff ffb8 	bl	8000450 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80004e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80004e6:	2302      	movs	r3, #2
 80004e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80004ee:	2301      	movs	r3, #1
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80004f6:	2304      	movs	r3, #4
 80004f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	4821      	ldr	r0, [pc, #132]	; (8000584 <MX_I2C1_Init+0xd4>)
 8000500:	f001 fc52 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000508:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800050a:	2302      	movs	r3, #2
 800050c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000512:	2301      	movs	r3, #1
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800051a:	2304      	movs	r3, #4
 800051c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4818      	ldr	r0, [pc, #96]	; (8000584 <MX_I2C1_Init+0xd4>)
 8000524:	f001 fc40 	bl	8001da8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000528:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800052c:	f7ff ffa8 	bl	8000480 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <MX_I2C1_Init+0xd8>)
 8000532:	f7ff ff7d 	bl	8000430 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <MX_I2C1_Init+0xd8>)
 800053c:	f7ff ff50 	bl	80003e0 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000540:	4811      	ldr	r0, [pc, #68]	; (8000588 <MX_I2C1_Init+0xd8>)
 8000542:	f7ff ff65 	bl	8000410 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <MX_I2C1_Init+0xd8>)
 8000548:	f7ff ff3a 	bl	80003c0 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <MX_I2C1_Init+0xd8>)
 800054e:	f7ff ff27 	bl	80003a0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00303D5B;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <MX_I2C1_Init+0xdc>)
 8000558:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000566:	2300      	movs	r3, #0
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <MX_I2C1_Init+0xd8>)
 8000576:	f001 fd2f 	bl	8001fd8 <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3738      	adds	r7, #56	; 0x38
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40020400 	.word	0x40020400
 8000588:	40005400 	.word	0x40005400
 800058c:	00303d5b 	.word	0x00303d5b

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <__NVIC_SetPriorityGrouping+0x40>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005ba:	4313      	orrs	r3, r2
 80005bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <__NVIC_SetPriorityGrouping+0x40>)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	60d3      	str	r3, [r2, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00
 80005d4:	05fa0000 	.word	0x05fa0000

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db12      	blt.n	800062c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	490a      	ldr	r1, [pc, #40]	; (8000638 <__NVIC_DisableIRQ+0x44>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	3320      	adds	r3, #32
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000620:	f3bf 8f4f 	dsb	sy
}
 8000624:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000626:	f3bf 8f6f 	isb	sy
}
 800062a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100

0800063c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db0a      	blt.n	8000666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	490c      	ldr	r1, [pc, #48]	; (8000688 <__NVIC_SetPriority+0x4c>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	0112      	lsls	r2, r2, #4
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	440b      	add	r3, r1
 8000660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000664:	e00a      	b.n	800067c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4908      	ldr	r1, [pc, #32]	; (800068c <__NVIC_SetPriority+0x50>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	3b04      	subs	r3, #4
 8000674:	0112      	lsls	r2, r2, #4
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	440b      	add	r3, r1
 800067a:	761a      	strb	r2, [r3, #24]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	f1c3 0307 	rsb	r3, r3, #7
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	bf28      	it	cs
 80006ae:	2304      	movcs	r3, #4
 80006b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3304      	adds	r3, #4
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d902      	bls.n	80006c0 <NVIC_EncodePriority+0x30>
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3b03      	subs	r3, #3
 80006be:	e000      	b.n	80006c2 <NVIC_EncodePriority+0x32>
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f04f 32ff 	mov.w	r2, #4294967295
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	43da      	mvns	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	401a      	ands	r2, r3
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d8:	f04f 31ff 	mov.w	r1, #4294967295
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43d9      	mvns	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	4313      	orrs	r3, r2
         );
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3724      	adds	r7, #36	; 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <LL_RCC_HSI_Enable+0x1c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <LL_RCC_HSI_Enable+0x1c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <LL_RCC_HSI_IsReady+0x20>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	2b02      	cmp	r3, #2
 8000726:	bf0c      	ite	eq
 8000728:	2301      	moveq	r3, #1
 800072a:	2300      	movne	r3, #0
 800072c:	b2db      	uxtb	r3, r3
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40023800 	.word	0x40023800

0800073c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	4904      	ldr	r1, [pc, #16]	; (8000764 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000752:	4313      	orrs	r3, r2
 8000754:	600b      	str	r3, [r1, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <LL_RCC_SetSysClkSource+0x24>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f023 0203 	bic.w	r2, r3, #3
 8000778:	4904      	ldr	r1, [pc, #16]	; (800078c <LL_RCC_SetSysClkSource+0x24>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4313      	orrs	r3, r2
 800077e:	608b      	str	r3, [r1, #8]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40023800 	.word	0x40023800

08000790 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <LL_RCC_GetSysClkSource+0x18>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 030c 	and.w	r3, r3, #12
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007bc:	4904      	ldr	r1, [pc, #16]	; (80007d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	608b      	str	r3, [r1, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80007e4:	4904      	ldr	r1, [pc, #16]	; (80007f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	608b      	str	r3, [r1, #8]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <LL_RCC_SetAPB2Prescaler+0x24>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	608b      	str	r3, [r1, #8]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40023800 	.word	0x40023800

08000824 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <LL_RCC_SetUSARTClockSource+0x30>)
 800082e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	0c1b      	lsrs	r3, r3, #16
 8000836:	43db      	mvns	r3, r3
 8000838:	401a      	ands	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	b29b      	uxth	r3, r3
 800083e:	4905      	ldr	r1, [pc, #20]	; (8000854 <LL_RCC_SetUSARTClockSource+0x30>)
 8000840:	4313      	orrs	r3, r2
 8000842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (I2CxSource & 0xFFFF0000U),  (I2CxSource << 16U));
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <LL_RCC_SetI2CClockSource+0x30>)
 8000862:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <LL_RCC_SetI2CClockSource+0x34>)
 800086a:	400b      	ands	r3, r1
 800086c:	43db      	mvns	r3, r3
 800086e:	401a      	ands	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	041b      	lsls	r3, r3, #16
 8000874:	4904      	ldr	r1, [pc, #16]	; (8000888 <LL_RCC_SetI2CClockSource+0x30>)
 8000876:	4313      	orrs	r3, r2
 8000878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800
 800088c:	ffff0000 	.word	0xffff0000

08000890 <LL_AHB1_GRP1_EnableClock>:
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800089a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4013      	ands	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40023800 	.word	0x40023800

080008c0 <LL_APB1_GRP1_EnableClock>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4013      	ands	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40023800 	.word	0x40023800

080008f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <LL_APB2_GRP1_EnableClock+0x2c>)
 80008fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <LL_APB2_GRP1_EnableClock+0x2c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4013      	ands	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40023800 	.word	0x40023800

08000920 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <LL_FLASH_SetLatency+0x24>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f023 020f 	bic.w	r2, r3, #15
 8000930:	4904      	ldr	r1, [pc, #16]	; (8000944 <LL_FLASH_SetLatency+0x24>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4313      	orrs	r3, r2
 8000936:	600b      	str	r3, [r1, #0]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40023c00 	.word	0x40023c00

08000948 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <LL_FLASH_GetLatency+0x18>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 030f 	and.w	r3, r3, #15
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <LL_PWR_DisableOverDriveMode+0x1c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <LL_PWR_DisableOverDriveMode+0x1c>)
 800096e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40007000 	.word	0x40007000

08000984 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000994:	4904      	ldr	r1, [pc, #16]	; (80009a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4313      	orrs	r3, r2
 800099a:	600b      	str	r3, [r1, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40007000 	.word	0x40007000

080009ac <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f043 0201 	orr.w	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a1a      	ldr	r2, [r3, #32]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	621a      	str	r2, [r3, #32]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d028      	beq.n	8000b00 <LL_TIM_OC_SetMode+0x64>
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d023      	beq.n	8000afc <LL_TIM_OC_SetMode+0x60>
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d01e      	beq.n	8000af8 <LL_TIM_OC_SetMode+0x5c>
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b40      	cmp	r3, #64	; 0x40
 8000abe:	d019      	beq.n	8000af4 <LL_TIM_OC_SetMode+0x58>
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac6:	d013      	beq.n	8000af0 <LL_TIM_OC_SetMode+0x54>
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ace:	d00d      	beq.n	8000aec <LL_TIM_OC_SetMode+0x50>
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ad6:	d007      	beq.n	8000ae8 <LL_TIM_OC_SetMode+0x4c>
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ade:	d101      	bne.n	8000ae4 <LL_TIM_OC_SetMode+0x48>
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	e00e      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	e00c      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000ae8:	2306      	movs	r3, #6
 8000aea:	e00a      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000aec:	2305      	movs	r3, #5
 8000aee:	e008      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000af0:	2304      	movs	r3, #4
 8000af2:	e006      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000af4:	2303      	movs	r3, #3
 8000af6:	e004      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e002      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <LL_TIM_OC_SetMode+0x66>
 8000b00:	2300      	movs	r3, #0
 8000b02:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3318      	adds	r3, #24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LL_TIM_OC_SetMode+0xac>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	440b      	add	r3, r1
 8000b12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	7dfb      	ldrb	r3, [r7, #23]
 8000b1a:	490c      	ldr	r1, [pc, #48]	; (8000b4c <LL_TIM_OC_SetMode+0xb0>)
 8000b1c:	5ccb      	ldrb	r3, [r1, r3]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <LL_TIM_OC_SetMode+0xb4>)
 8000b22:	408b      	lsls	r3, r1
 8000b24:	43db      	mvns	r3, r3
 8000b26:	401a      	ands	r2, r3
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <LL_TIM_OC_SetMode+0xb0>)
 8000b2c:	5ccb      	ldrb	r3, [r1, r3]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	408b      	lsls	r3, r1
 8000b34:	431a      	orrs	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	080050a8 	.word	0x080050a8
 8000b4c:	080050b4 	.word	0x080050b4
 8000b50:	00010073 	.word	0x00010073

08000b54 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d028      	beq.n	8000bb8 <LL_TIM_OC_SetPolarity+0x64>
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d023      	beq.n	8000bb4 <LL_TIM_OC_SetPolarity+0x60>
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	d01e      	beq.n	8000bb0 <LL_TIM_OC_SetPolarity+0x5c>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b40      	cmp	r3, #64	; 0x40
 8000b76:	d019      	beq.n	8000bac <LL_TIM_OC_SetPolarity+0x58>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b7e:	d013      	beq.n	8000ba8 <LL_TIM_OC_SetPolarity+0x54>
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b86:	d00d      	beq.n	8000ba4 <LL_TIM_OC_SetPolarity+0x50>
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8e:	d007      	beq.n	8000ba0 <LL_TIM_OC_SetPolarity+0x4c>
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b96:	d101      	bne.n	8000b9c <LL_TIM_OC_SetPolarity+0x48>
 8000b98:	2307      	movs	r3, #7
 8000b9a:	e00e      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	e00c      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	e00a      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	e008      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e006      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e004      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <LL_TIM_OC_SetPolarity+0x66>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6a1a      	ldr	r2, [r3, #32]
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	490b      	ldr	r1, [pc, #44]	; (8000bf0 <LL_TIM_OC_SetPolarity+0x9c>)
 8000bc4:	5ccb      	ldrb	r3, [r1, r3]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2302      	movs	r3, #2
 8000bca:	408b      	lsls	r3, r1
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <LL_TIM_OC_SetPolarity+0x9c>)
 8000bd4:	5ccb      	ldrb	r3, [r1, r3]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	408b      	lsls	r3, r1
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	621a      	str	r2, [r3, #32]
}
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	080050c0 	.word	0x080050c0

08000bf4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d028      	beq.n	8000c56 <LL_TIM_OC_EnablePreload+0x62>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d023      	beq.n	8000c52 <LL_TIM_OC_EnablePreload+0x5e>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b10      	cmp	r3, #16
 8000c0e:	d01e      	beq.n	8000c4e <LL_TIM_OC_EnablePreload+0x5a>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b40      	cmp	r3, #64	; 0x40
 8000c14:	d019      	beq.n	8000c4a <LL_TIM_OC_EnablePreload+0x56>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c1c:	d013      	beq.n	8000c46 <LL_TIM_OC_EnablePreload+0x52>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c24:	d00d      	beq.n	8000c42 <LL_TIM_OC_EnablePreload+0x4e>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c2c:	d007      	beq.n	8000c3e <LL_TIM_OC_EnablePreload+0x4a>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d101      	bne.n	8000c3a <LL_TIM_OC_EnablePreload+0x46>
 8000c36:	2307      	movs	r3, #7
 8000c38:	e00e      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	e00c      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c3e:	2306      	movs	r3, #6
 8000c40:	e00a      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c42:	2305      	movs	r3, #5
 8000c44:	e008      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c46:	2304      	movs	r3, #4
 8000c48:	e006      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e004      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e002      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <LL_TIM_OC_EnablePreload+0x64>
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3318      	adds	r3, #24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LL_TIM_OC_EnablePreload+0x98>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	440b      	add	r3, r1
 8000c68:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <LL_TIM_OC_EnablePreload+0x9c>)
 8000c72:	5ccb      	ldrb	r3, [r1, r3]
 8000c74:	4619      	mov	r1, r3
 8000c76:	2308      	movs	r3, #8
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	080050a8 	.word	0x080050a8
 8000c90:	080050b4 	.word	0x080050b4

08000c94 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f043 0202 	orr.w	r2, r3, #2
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f043 0204 	orr.w	r2, r3, #4
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60da      	str	r2, [r3, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_TIM_EnableIT_CC3>:
  * @rmtoll DIER         CC3IE         LL_TIM_EnableIT_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC3(TIM_TypeDef *TIMx)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	f043 0208 	orr.w	r2, r3, #8
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_TIM_EnableIT_CC4>:
  * @rmtoll DIER         CC4IE         LL_TIM_EnableIT_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC4(TIM_TypeDef *TIMx)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f043 0210 	orr.w	r2, r3, #16
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	615a      	str	r2, [r3, #20]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	d101      	bne.n	8000dbc <LL_USART_IsActiveFlag_RXNE+0x18>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	b2db      	uxtb	r3, r3
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_GPIO_SetOutputPin>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	619a      	str	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_GPIO_ResetOutputPin>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	619a      	str	r2, [r3, #24]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e2a:	f7ff fd49 	bl	80008c0 <LL_APB1_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e32:	f7ff fd5d 	bl	80008f0 <LL_APB2_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f7ff fbaa 	bl	8000590 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000e3c:	f7ff fbcc 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2200      	movs	r2, #0
 8000e44:	210f      	movs	r1, #15
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc22 	bl	8000690 <NVIC_EncodePriority>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f06f 0001 	mvn.w	r0, #1
 8000e54:	f7ff fbf2 	bl	800063c <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000e58:	f7ff fbbe 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210f      	movs	r1, #15
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc14 	bl	8000690 <NVIC_EncodePriority>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff fbe4 	bl	800063c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f848 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f7ff fa24 	bl	80002c4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e7c:	f000 fcd2 	bl	8001824 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000e80:	f7ff fb16 	bl	80004b0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e84:	f000 fdfe 	bl	8001a84 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Configure_TIMPWMOutput();
 8000e88:	f000 f87e 	bl	8000f88 <Configure_TIMPWMOutput>
  if(xTaskCreate(Motivation_Task, "Motivation_Task", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2,NULL)!=pdPASS){while(1);}
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	2302      	movs	r3, #2
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	4916      	ldr	r1, [pc, #88]	; (8000ef4 <main+0xd4>)
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <main+0xd8>)
 8000e9c:	f002 fe43 	bl	8003b26 <xTaskCreate>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d000      	beq.n	8000ea8 <main+0x88>
 8000ea6:	e7fe      	b.n	8000ea6 <main+0x86>
  if(xTaskCreate(Uart_Rx_Task, "Uart_Rx_Task", STACK_SIZE, NULL, tskIDLE_PRIORITY+2,NULL)!=pdPASS){while(1);}
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	2302      	movs	r3, #2
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	4911      	ldr	r1, [pc, #68]	; (8000efc <main+0xdc>)
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <main+0xe0>)
 8000eb8:	f002 fe35 	bl	8003b26 <xTaskCreate>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <main+0xa4>
 8000ec2:	e7fe      	b.n	8000ec2 <main+0xa2>
  ledCmdQueue = xQueueCreate(2, sizeof(uint8_t));
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f002 fa6b 	bl	80033a4 <xQueueGenericCreate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <main+0xe4>)
 8000ed2:	6013      	str	r3, [r2, #0]
  while(ledCmdQueue == NULL);
 8000ed4:	bf00      	nop
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <main+0xe4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0fb      	beq.n	8000ed6 <main+0xb6>
  vTaskStartScheduler();
 8000ede:	f002 ff91 	bl	8003e04 <vTaskStartScheduler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Forward();
 8000ee2:	f000 f96f 	bl	80011c4 <Forward>
	  Backward();
 8000ee6:	f000 f9b7 	bl	8001258 <Backward>
	  Rightward();
 8000eea:	f000 fa07 	bl	80012fc <Rightward>
	  Leftward();
 8000eee:	f000 fa57 	bl	80013a0 <Leftward>
	  Forward();
 8000ef2:	e7f6      	b.n	8000ee2 <main+0xc2>
 8000ef4:	08005080 	.word	0x08005080
 8000ef8:	080014a5 	.word	0x080014a5
 8000efc:	08005090 	.word	0x08005090
 8000f00:	08001555 	.word	0x08001555
 8000f04:	20000278 	.word	0x20000278

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fd07 	bl	8000920 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000f12:	bf00      	nop
 8000f14:	f7ff fd18 	bl	8000948 <LL_FLASH_GetLatency>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1fa      	bne.n	8000f14 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000f1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f22:	f7ff fd2f 	bl	8000984 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000f26:	f7ff fd1d 	bl	8000964 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f7ff fc06 	bl	800073c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000f30:	f7ff fbe2 	bl	80006f8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f34:	bf00      	nop
 8000f36:	f7ff fbef 	bl	8000718 <LL_RCC_HSI_IsReady>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d1fa      	bne.n	8000f36 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff fc33 	bl	80007ac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff fc44 	bl	80007d4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fc55 	bl	80007fc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fc08 	bl	8000768 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000f58:	bf00      	nop
 8000f5a:	f7ff fc19 	bl	8000790 <LL_RCC_GetSysClkSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1fa      	bne.n	8000f5a <SystemClock_Config+0x52>
  {

  }
  LL_Init1msTick(16000000);
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <SystemClock_Config+0x7c>)
 8000f66:	f002 f8e1 	bl	800312c <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <SystemClock_Config+0x7c>)
 8000f6c:	f002 f8ec 	bl	8003148 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8000f70:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8000f74:	f7ff fc56 	bl	8000824 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000f78:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000f7c:	f7ff fc6c 	bl	8000858 <LL_RCC_SetI2CClockSource>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	00f42400 	.word	0x00f42400

08000f88 <Configure_TIMPWMOutput>:

/* USER CODE BEGIN 4 */
__STATIC_INLINE void  Configure_TIMPWMOutput(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
  /*************************/
  /* GPIO AF configuration */
  /*************************/
  /* Enable the peripheral clock of GPIOs */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000f8e:	2008      	movs	r0, #8
 8000f90:	f7ff fc7e 	bl	8000890 <LL_AHB1_GRP1_EnableClock>


  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000fa4:	2340      	movs	r3, #64	; 0x40
 8000fa6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	487a      	ldr	r0, [pc, #488]	; (80011ac <Configure_TIMPWMOutput+0x224>)
 8000fc2:	f000 fef1 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4872      	ldr	r0, [pc, #456]	; (80011b0 <Configure_TIMPWMOutput+0x228>)
 8000fe6:	f000 fedf 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4869      	ldr	r0, [pc, #420]	; (80011b0 <Configure_TIMPWMOutput+0x228>)
 800100a:	f000 fecd 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800100e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001012:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001014:	2302      	movs	r3, #2
 8001016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4860      	ldr	r0, [pc, #384]	; (80011b0 <Configure_TIMPWMOutput+0x228>)
 800102e:	f000 febb 	bl	8001da8 <LL_GPIO_Init>

  /***********************************************/
  /* Configure the NVIC to handle TIM4 interrupt */
  /***********************************************/
  NVIC_SetPriority(TIM4_IRQn, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	201e      	movs	r0, #30
 8001036:	f7ff fb01 	bl	800063c <__NVIC_SetPriority>
  NVIC_DisableIRQ(TIM4_IRQn);
 800103a:	201e      	movs	r0, #30
 800103c:	f7ff fada 	bl	80005f4 <__NVIC_DisableIRQ>

  /******************************/
  /* Peripheral clocks enabling */
  /******************************/
  /* Enable the timer peripheral clock */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001040:	2004      	movs	r0, #4
 8001042:	f7ff fc3d 	bl	80008c0 <LL_APB1_GRP1_EnableClock>
  /***************************/
  /* Time base configuration */
  /***************************/
  /* Set counter mode */
  /* Reset value is LL_TIM_COUNTERMODE_UP */
  LL_TIM_SetCounterMode(TIM4, LL_TIM_COUNTERMODE_UP);
 8001046:	2100      	movs	r1, #0
 8001048:	485a      	ldr	r0, [pc, #360]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800104a:	f7ff fcbf 	bl	80009cc <LL_TIM_SetCounterMode>

  /* Set the pre-scaler value to have TIM1 counter clock equal to 10 kHz */
  LL_TIM_SetPrescaler(TIM4, __LL_TIM_CALC_PSC(SystemCoreClock, 10000));
 800104e:	4b5a      	ldr	r3, [pc, #360]	; (80011b8 <Configure_TIMPWMOutput+0x230>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f242 720f 	movw	r2, #9999	; 0x270f
 8001056:	4293      	cmp	r3, r2
 8001058:	d907      	bls.n	800106a <Configure_TIMPWMOutput+0xe2>
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <Configure_TIMPWMOutput+0x230>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a57      	ldr	r2, [pc, #348]	; (80011bc <Configure_TIMPWMOutput+0x234>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0b5b      	lsrs	r3, r3, #13
 8001066:	3b01      	subs	r3, #1
 8001068:	e000      	b.n	800106c <Configure_TIMPWMOutput+0xe4>
 800106a:	2300      	movs	r3, #0
 800106c:	4619      	mov	r1, r3
 800106e:	4851      	ldr	r0, [pc, #324]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001070:	f7ff fccf 	bl	8000a12 <LL_TIM_SetPrescaler>

  /* Enable TIM1_ARR register preload. Writing to or reading from the         */
  /* auto-reload register accesses the preload register. The content of the   */
  /* preload register are transferred into the shadow register at each update */
  /* event (UEV).                                                             */
  LL_TIM_EnableARRPreload(TIM4);
 8001074:	484f      	ldr	r0, [pc, #316]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001076:	f7ff fcbc 	bl	80009f2 <LL_TIM_EnableARRPreload>

  /* Set the auto-reload value to have a counter frequency of 100 Hz */
  /* TIM1CLK = SystemCoreClock / (APB prescaler & multiplier)               */
  TimOutClock = SystemCoreClock/2;
 800107a:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <Configure_TIMPWMOutput+0x230>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <Configure_TIMPWMOutput+0x238>)
 8001082:	6013      	str	r3, [r2, #0]
  LL_TIM_SetAutoReload(TIM4, __LL_TIM_CALC_ARR(TimOutClock, LL_TIM_GetPrescaler(TIM4), 100));
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <Configure_TIMPWMOutput+0x238>)
 8001086:	681c      	ldr	r4, [r3, #0]
 8001088:	484a      	ldr	r0, [pc, #296]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800108a:	f7ff fcd0 	bl	8000a2e <LL_TIM_GetPrescaler>
 800108e:	4603      	mov	r3, r0
 8001090:	3301      	adds	r3, #1
 8001092:	fbb4 f3f3 	udiv	r3, r4, r3
 8001096:	2b63      	cmp	r3, #99	; 0x63
 8001098:	d90d      	bls.n	80010b6 <Configure_TIMPWMOutput+0x12e>
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <Configure_TIMPWMOutput+0x238>)
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	4845      	ldr	r0, [pc, #276]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010a0:	f7ff fcc5 	bl	8000a2e <LL_TIM_GetPrescaler>
 80010a4:	4603      	mov	r3, r0
 80010a6:	3301      	adds	r3, #1
 80010a8:	2264      	movs	r2, #100	; 0x64
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	e000      	b.n	80010b8 <Configure_TIMPWMOutput+0x130>
 80010b6:	2300      	movs	r3, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	483e      	ldr	r0, [pc, #248]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010bc:	f7ff fcc3 	bl	8000a46 <LL_TIM_SetAutoReload>
  /*********************************/
  /* Output waveform configuration */
  /*********************************/
  /* Set output mode */
  /* Reset value is LL_TIM_OCMODE_FROZEN */
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 80010c0:	2260      	movs	r2, #96	; 0x60
 80010c2:	2101      	movs	r1, #1
 80010c4:	483b      	ldr	r0, [pc, #236]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010c6:	f7ff fce9 	bl	8000a9c <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 80010ca:	2260      	movs	r2, #96	; 0x60
 80010cc:	2110      	movs	r1, #16
 80010ce:	4839      	ldr	r0, [pc, #228]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010d0:	f7ff fce4 	bl	8000a9c <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1);
 80010d4:	2260      	movs	r2, #96	; 0x60
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	4836      	ldr	r0, [pc, #216]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010dc:	f7ff fcde 	bl	8000a9c <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetMode(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_OCMODE_PWM1);
 80010e0:	2260      	movs	r2, #96	; 0x60
 80010e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010e8:	f7ff fcd8 	bl	8000a9c <LL_TIM_OC_SetMode>

  /* Set output channel polarity */
  /* Reset value is LL_TIM_OCPOLARITY_HIGH */
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2101      	movs	r1, #1
 80010f0:	4830      	ldr	r0, [pc, #192]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010f2:	f7ff fd2f 	bl	8000b54 <LL_TIM_OC_SetPolarity>
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2110      	movs	r1, #16
 80010fa:	482e      	ldr	r0, [pc, #184]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80010fc:	f7ff fd2a 	bl	8000b54 <LL_TIM_OC_SetPolarity>
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	482b      	ldr	r0, [pc, #172]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001108:	f7ff fd24 	bl	8000b54 <LL_TIM_OC_SetPolarity>
  LL_TIM_OC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001112:	4828      	ldr	r0, [pc, #160]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001114:	f7ff fd1e 	bl	8000b54 <LL_TIM_OC_SetPolarity>

  /* Set compare value to half of the counter period (50% duty cycle ) */
  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 8001118:	2100      	movs	r1, #0
 800111a:	4826      	ldr	r0, [pc, #152]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800111c:	f7ff fdba 	bl	8000c94 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	4824      	ldr	r0, [pc, #144]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001124:	f7ff fdc4 	bl	8000cb0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	4822      	ldr	r0, [pc, #136]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800112c:	f7ff fdce 	bl	8000ccc <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIM4, 0);
 8001130:	2100      	movs	r1, #0
 8001132:	4820      	ldr	r0, [pc, #128]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001134:	f7ff fdd8 	bl	8000ce8 <LL_TIM_OC_SetCompareCH4>

  /* Enable TIM1_CCR1 register preload. Read/Write operations access the      */
  /* preload register. TIM4_CCR1~4 preload value is loaded in the active        */
  /* at each update event.                                                    */
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8001138:	2101      	movs	r1, #1
 800113a:	481e      	ldr	r0, [pc, #120]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800113c:	f7ff fd5a 	bl	8000bf4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8001140:	2110      	movs	r1, #16
 8001142:	481c      	ldr	r0, [pc, #112]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001144:	f7ff fd56 	bl	8000bf4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8001148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114c:	4819      	ldr	r0, [pc, #100]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800114e:	f7ff fd51 	bl	8000bf4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4817      	ldr	r0, [pc, #92]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001158:	f7ff fd4c 	bl	8000bf4 <LL_TIM_OC_EnablePreload>

  /**************************/
  /* TIM4 interrupts set-up */
  /**************************/
  /* Enable the capture/compare interrupt for channel 1~4*/
  LL_TIM_EnableIT_CC1(TIM4);
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800115e:	f7ff fdd1 	bl	8000d04 <LL_TIM_EnableIT_CC1>
  LL_TIM_EnableIT_CC2(TIM4);
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001164:	f7ff fdde 	bl	8000d24 <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableIT_CC3(TIM4);
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800116a:	f7ff fdeb 	bl	8000d44 <LL_TIM_EnableIT_CC3>
  LL_TIM_EnableIT_CC4(TIM4);
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001170:	f7ff fdf8 	bl	8000d64 <LL_TIM_EnableIT_CC4>

  /**********************************/
  /* Start output signal generation */
  /**********************************/
  /* Enable output channel 1~4 */
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8001174:	2101      	movs	r1, #1
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001178:	f7ff fc7f 	bl	8000a7a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 800117c:	2110      	movs	r1, #16
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001180:	f7ff fc7b 	bl	8000a7a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH3);
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800118a:	f7ff fc76 	bl	8000a7a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 800118e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 8001194:	f7ff fc71 	bl	8000a7a <LL_TIM_CC_EnableChannel>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM4);
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 800119a:	f7ff fc07 	bl	80009ac <LL_TIM_EnableCounter>

  /* Force update generation */
  LL_TIM_GenerateEvent_UPDATE(TIM4);
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <Configure_TIMPWMOutput+0x22c>)
 80011a0:	f7ff fdf0 	bl	8000d84 <LL_TIM_GenerateEvent_UPDATE>
}
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40000800 	.word	0x40000800
 80011b8:	20000000 	.word	0x20000000
 80011bc:	d1b71759 	.word	0xd1b71759
 80011c0:	20003fc8 	.word	0x20003fc8

080011c4 <Forward>:


void Forward(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_4);
 80011ca:	2110      	movs	r1, #16
 80011cc:	481f      	ldr	r0, [pc, #124]	; (800124c <Forward+0x88>)
 80011ce:	f7ff fe17 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOF, LL_GPIO_PIN_8);
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	481e      	ldr	r0, [pc, #120]	; (8001250 <Forward+0x8c>)
 80011d8:	f7ff fe04 	bl	8000de4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_6);
 80011dc:	2140      	movs	r1, #64	; 0x40
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <Forward+0x88>)
 80011e0:	f7ff fe00 	bl	8000de4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_5);
 80011e4:	2120      	movs	r1, #32
 80011e6:	4819      	ldr	r0, [pc, #100]	; (800124c <Forward+0x88>)
 80011e8:	f7ff fdfc 	bl	8000de4 <LL_GPIO_SetOutputPin>
	 for(int i=0;i<1000;i++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	e022      	b.n	8001238 <Forward+0x74>
	  	 LL_TIM_OC_SetCompareCH2(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <Forward+0x90>)
 80011f4:	f7ff fc35 	bl	8000a62 <LL_TIM_GetAutoReload>
 80011f8:	4603      	mov	r3, r0
 80011fa:	3301      	adds	r3, #1
 80011fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001200:	4619      	mov	r1, r3
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <Forward+0x90>)
 8001204:	f7ff fd54 	bl	8000cb0 <LL_TIM_OC_SetCompareCH2>
	  	 LL_TIM_OC_SetCompareCH1(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001208:	4812      	ldr	r0, [pc, #72]	; (8001254 <Forward+0x90>)
 800120a:	f7ff fc2a 	bl	8000a62 <LL_TIM_GetAutoReload>
 800120e:	2100      	movs	r1, #0
 8001210:	4810      	ldr	r0, [pc, #64]	; (8001254 <Forward+0x90>)
 8001212:	f7ff fd3f 	bl	8000c94 <LL_TIM_OC_SetCompareCH1>
	  	 LL_TIM_OC_SetCompareCH4(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <Forward+0x90>)
 8001218:	f7ff fc23 	bl	8000a62 <LL_TIM_GetAutoReload>
 800121c:	2100      	movs	r1, #0
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <Forward+0x90>)
 8001220:	f7ff fd62 	bl	8000ce8 <LL_TIM_OC_SetCompareCH4>
	  	 LL_TIM_OC_SetCompareCH3(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <Forward+0x90>)
 8001226:	f7ff fc1c 	bl	8000a62 <LL_TIM_GetAutoReload>
 800122a:	2100      	movs	r1, #0
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <Forward+0x90>)
 800122e:	f7ff fd4d 	bl	8000ccc <LL_TIM_OC_SetCompareCH3>
	 for(int i=0;i<1000;i++){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123e:	dbd8      	blt.n	80011f2 <Forward+0x2e>
	 }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40000800 	.word	0x40000800

08001258 <Backward>:

void Backward(){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_4);
 800125e:	2110      	movs	r1, #16
 8001260:	4823      	ldr	r0, [pc, #140]	; (80012f0 <Backward+0x98>)
 8001262:	f7ff fdbf 	bl	8000de4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_8);
 8001266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126a:	4822      	ldr	r0, [pc, #136]	; (80012f4 <Backward+0x9c>)
 800126c:	f7ff fdc8 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_5);
 8001270:	2120      	movs	r1, #32
 8001272:	481f      	ldr	r0, [pc, #124]	; (80012f0 <Backward+0x98>)
 8001274:	f7ff fdc4 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_6);
 8001278:	2140      	movs	r1, #64	; 0x40
 800127a:	481d      	ldr	r0, [pc, #116]	; (80012f0 <Backward+0x98>)
 800127c:	f7ff fdc0 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	for(int i=0;i<1000;i++){
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	e02a      	b.n	80012dc <Backward+0x84>
		LL_TIM_OC_SetCompareCH2(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001286:	481c      	ldr	r0, [pc, #112]	; (80012f8 <Backward+0xa0>)
 8001288:	f7ff fbeb 	bl	8000a62 <LL_TIM_GetAutoReload>
 800128c:	2100      	movs	r1, #0
 800128e:	481a      	ldr	r0, [pc, #104]	; (80012f8 <Backward+0xa0>)
 8001290:	f7ff fd0e 	bl	8000cb0 <LL_TIM_OC_SetCompareCH2>
	    LL_TIM_OC_SetCompareCH1(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <Backward+0xa0>)
 8001296:	f7ff fbe4 	bl	8000a62 <LL_TIM_GetAutoReload>
 800129a:	4603      	mov	r3, r0
 800129c:	3301      	adds	r3, #1
 800129e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80012a2:	4619      	mov	r1, r3
 80012a4:	4814      	ldr	r0, [pc, #80]	; (80012f8 <Backward+0xa0>)
 80012a6:	f7ff fcf5 	bl	8000c94 <LL_TIM_OC_SetCompareCH1>
	    LL_TIM_OC_SetCompareCH3(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <Backward+0xa0>)
 80012ac:	f7ff fbd9 	bl	8000a62 <LL_TIM_GetAutoReload>
 80012b0:	4603      	mov	r3, r0
 80012b2:	3301      	adds	r3, #1
 80012b4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80012b8:	4619      	mov	r1, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <Backward+0xa0>)
 80012bc:	f7ff fd06 	bl	8000ccc <LL_TIM_OC_SetCompareCH3>
	    LL_TIM_OC_SetCompareCH4(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <Backward+0xa0>)
 80012c2:	f7ff fbce 	bl	8000a62 <LL_TIM_GetAutoReload>
 80012c6:	4603      	mov	r3, r0
 80012c8:	3301      	adds	r3, #1
 80012ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80012ce:	4619      	mov	r1, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <Backward+0xa0>)
 80012d2:	f7ff fd09 	bl	8000ce8 <LL_TIM_OC_SetCompareCH4>
	for(int i=0;i<1000;i++){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3301      	adds	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e2:	dbd0      	blt.n	8001286 <Backward+0x2e>
	}
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40000800 	.word	0x40000800

080012fc <Rightward>:

void Rightward(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_4);
 8001302:	2110      	movs	r1, #16
 8001304:	4823      	ldr	r0, [pc, #140]	; (8001394 <Rightward+0x98>)
 8001306:	f7ff fd7b 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_8);
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	4822      	ldr	r0, [pc, #136]	; (8001398 <Rightward+0x9c>)
 8001310:	f7ff fd76 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_5);
 8001314:	2120      	movs	r1, #32
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <Rightward+0x98>)
 8001318:	f7ff fd64 	bl	8000de4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_6);
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	481d      	ldr	r0, [pc, #116]	; (8001394 <Rightward+0x98>)
 8001320:	f7ff fd6e 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	for(int i=0;i<1000;i++){
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	e02a      	b.n	8001380 <Rightward+0x84>
		LL_TIM_OC_SetCompareCH2(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 800132a:	481c      	ldr	r0, [pc, #112]	; (800139c <Rightward+0xa0>)
 800132c:	f7ff fb99 	bl	8000a62 <LL_TIM_GetAutoReload>
 8001330:	4603      	mov	r3, r0
 8001332:	3301      	adds	r3, #1
 8001334:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001338:	4619      	mov	r1, r3
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <Rightward+0xa0>)
 800133c:	f7ff fcb8 	bl	8000cb0 <LL_TIM_OC_SetCompareCH2>
	    LL_TIM_OC_SetCompareCH1(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <Rightward+0xa0>)
 8001342:	f7ff fb8e 	bl	8000a62 <LL_TIM_GetAutoReload>
 8001346:	4603      	mov	r3, r0
 8001348:	3301      	adds	r3, #1
 800134a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800134e:	4619      	mov	r1, r3
 8001350:	4812      	ldr	r0, [pc, #72]	; (800139c <Rightward+0xa0>)
 8001352:	f7ff fc9f 	bl	8000c94 <LL_TIM_OC_SetCompareCH1>
	    LL_TIM_OC_SetCompareCH3(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <Rightward+0xa0>)
 8001358:	f7ff fb83 	bl	8000a62 <LL_TIM_GetAutoReload>
 800135c:	2100      	movs	r1, #0
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <Rightward+0xa0>)
 8001360:	f7ff fcb4 	bl	8000ccc <LL_TIM_OC_SetCompareCH3>
	    LL_TIM_OC_SetCompareCH4(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <Rightward+0xa0>)
 8001366:	f7ff fb7c 	bl	8000a62 <LL_TIM_GetAutoReload>
 800136a:	4603      	mov	r3, r0
 800136c:	3301      	adds	r3, #1
 800136e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001372:	4619      	mov	r1, r3
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <Rightward+0xa0>)
 8001376:	f7ff fcb7 	bl	8000ce8 <LL_TIM_OC_SetCompareCH4>
	for(int i=0;i<1000;i++){
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001386:	dbd0      	blt.n	800132a <Rightward+0x2e>
	}
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40000800 	.word	0x40000800

080013a0 <Leftward>:

void Leftward(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_4);
 80013a6:	2110      	movs	r1, #16
 80013a8:	481f      	ldr	r0, [pc, #124]	; (8001428 <Leftward+0x88>)
 80013aa:	f7ff fd1b 	bl	8000de4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOF, LL_GPIO_PIN_8);
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	481e      	ldr	r0, [pc, #120]	; (800142c <Leftward+0x8c>)
 80013b4:	f7ff fd16 	bl	8000de4 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_5);
 80013b8:	2120      	movs	r1, #32
 80013ba:	481b      	ldr	r0, [pc, #108]	; (8001428 <Leftward+0x88>)
 80013bc:	f7ff fd20 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_6);
 80013c0:	2140      	movs	r1, #64	; 0x40
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <Leftward+0x88>)
 80013c4:	f7ff fd0e 	bl	8000de4 <LL_GPIO_SetOutputPin>
	for(int i=0;i<1000;i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	e022      	b.n	8001414 <Leftward+0x74>
		LL_TIM_OC_SetCompareCH2(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <Leftward+0x90>)
 80013d0:	f7ff fb47 	bl	8000a62 <LL_TIM_GetAutoReload>
 80013d4:	2100      	movs	r1, #0
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <Leftward+0x90>)
 80013d8:	f7ff fc6a 	bl	8000cb0 <LL_TIM_OC_SetCompareCH2>
	    LL_TIM_OC_SetCompareCH1(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 80013dc:	4814      	ldr	r0, [pc, #80]	; (8001430 <Leftward+0x90>)
 80013de:	f7ff fb40 	bl	8000a62 <LL_TIM_GetAutoReload>
 80013e2:	2100      	movs	r1, #0
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <Leftward+0x90>)
 80013e6:	f7ff fc55 	bl	8000c94 <LL_TIM_OC_SetCompareCH1>
	    LL_TIM_OC_SetCompareCH3(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*4/4);
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <Leftward+0x90>)
 80013ec:	f7ff fb39 	bl	8000a62 <LL_TIM_GetAutoReload>
 80013f0:	4603      	mov	r3, r0
 80013f2:	3301      	adds	r3, #1
 80013f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <Leftward+0x90>)
 80013fc:	f7ff fc66 	bl	8000ccc <LL_TIM_OC_SetCompareCH3>
	    LL_TIM_OC_SetCompareCH4(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001400:	480b      	ldr	r0, [pc, #44]	; (8001430 <Leftward+0x90>)
 8001402:	f7ff fb2e 	bl	8000a62 <LL_TIM_GetAutoReload>
 8001406:	2100      	movs	r1, #0
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <Leftward+0x90>)
 800140a:	f7ff fc6d 	bl	8000ce8 <LL_TIM_OC_SetCompareCH4>
	for(int i=0;i<1000;i++){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141a:	dbd8      	blt.n	80013ce <Leftward+0x2e>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40000800 	.word	0x40000800

08001434 <Stop>:

void Stop(){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_4);
 8001438:	2110      	movs	r1, #16
 800143a:	4817      	ldr	r0, [pc, #92]	; (8001498 <Stop+0x64>)
 800143c:	f7ff fce0 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_8);
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	4815      	ldr	r0, [pc, #84]	; (800149c <Stop+0x68>)
 8001446:	f7ff fcdb 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_5);
 800144a:	2120      	movs	r1, #32
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <Stop+0x64>)
 800144e:	f7ff fcd7 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_6);
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4810      	ldr	r0, [pc, #64]	; (8001498 <Stop+0x64>)
 8001456:	f7ff fcd3 	bl	8000e00 <LL_GPIO_ResetOutputPin>
	LL_TIM_OC_SetCompareCH2(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <Stop+0x6c>)
 800145c:	f7ff fb01 	bl	8000a62 <LL_TIM_GetAutoReload>
 8001460:	2100      	movs	r1, #0
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <Stop+0x6c>)
 8001464:	f7ff fc24 	bl	8000cb0 <LL_TIM_OC_SetCompareCH2>
	LL_TIM_OC_SetCompareCH1(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <Stop+0x6c>)
 800146a:	f7ff fafa 	bl	8000a62 <LL_TIM_GetAutoReload>
 800146e:	2100      	movs	r1, #0
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <Stop+0x6c>)
 8001472:	f7ff fc0f 	bl	8000c94 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_OC_SetCompareCH3(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001476:	480a      	ldr	r0, [pc, #40]	; (80014a0 <Stop+0x6c>)
 8001478:	f7ff faf3 	bl	8000a62 <LL_TIM_GetAutoReload>
 800147c:	2100      	movs	r1, #0
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <Stop+0x6c>)
 8001480:	f7ff fc24 	bl	8000ccc <LL_TIM_OC_SetCompareCH3>
	LL_TIM_OC_SetCompareCH4(TIM4, (LL_TIM_GetAutoReload(TIM4)+1)*0/4);
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <Stop+0x6c>)
 8001486:	f7ff faec 	bl	8000a62 <LL_TIM_GetAutoReload>
 800148a:	2100      	movs	r1, #0
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <Stop+0x6c>)
 800148e:	f7ff fc2b 	bl	8000ce8 <LL_TIM_OC_SetCompareCH4>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40021400 	.word	0x40021400
 80014a0:	40000800 	.word	0x40000800

080014a4 <Motivation_Task>:

void Motivation_Task(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	uint8_t nextCmd = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]
	while(1){
	if(xQueueReceive(ledCmdQueue, &nextCmd, portMAX_DELAY) == pdTRUE)
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <Motivation_Task+0xac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1df9      	adds	r1, r7, #7
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f8db 	bl	8003674 <xQueueReceive>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d1f4      	bne.n	80014ae <Motivation_Task+0xa>
	{
		switch(nextCmd)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	3b61      	subs	r3, #97	; 0x61
 80014c8:	2b16      	cmp	r3, #22
 80014ca:	d83d      	bhi.n	8001548 <Motivation_Task+0xa4>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <Motivation_Task+0x30>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	08001537 	.word	0x08001537
 80014d8:	08001549 	.word	0x08001549
 80014dc:	08001549 	.word	0x08001549
 80014e0:	08001543 	.word	0x08001543
 80014e4:	08001549 	.word	0x08001549
 80014e8:	08001549 	.word	0x08001549
 80014ec:	08001549 	.word	0x08001549
 80014f0:	08001549 	.word	0x08001549
 80014f4:	08001549 	.word	0x08001549
 80014f8:	08001549 	.word	0x08001549
 80014fc:	08001549 	.word	0x08001549
 8001500:	08001549 	.word	0x08001549
 8001504:	08001549 	.word	0x08001549
 8001508:	08001549 	.word	0x08001549
 800150c:	08001549 	.word	0x08001549
 8001510:	08001549 	.word	0x08001549
 8001514:	08001549 	.word	0x08001549
 8001518:	08001549 	.word	0x08001549
 800151c:	0800153d 	.word	0x0800153d
 8001520:	08001549 	.word	0x08001549
 8001524:	08001549 	.word	0x08001549
 8001528:	08001549 	.word	0x08001549
 800152c:	08001531 	.word	0x08001531
		{
		case'w':
			Forward();
 8001530:	f7ff fe48 	bl	80011c4 <Forward>
			break;
 8001534:	e008      	b.n	8001548 <Motivation_Task+0xa4>

		case'a':
			Leftward();
 8001536:	f7ff ff33 	bl	80013a0 <Leftward>
			break;
 800153a:	e005      	b.n	8001548 <Motivation_Task+0xa4>

		case's':
			Backward();
 800153c:	f7ff fe8c 	bl	8001258 <Backward>
			break;
 8001540:	e002      	b.n	8001548 <Motivation_Task+0xa4>
		case'd':
			Rightward();
 8001542:	f7ff fedb 	bl	80012fc <Rightward>
			break;
 8001546:	bf00      	nop
		}
		Stop();
 8001548:	f7ff ff74 	bl	8001434 <Stop>
	if(xQueueReceive(ledCmdQueue, &nextCmd, portMAX_DELAY) == pdTRUE)
 800154c:	e7af      	b.n	80014ae <Motivation_Task+0xa>
 800154e:	bf00      	nop
 8001550:	20000278 	.word	0x20000278

08001554 <Uart_Rx_Task>:
	}
	}
}

void Uart_Rx_Task(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
	uint8_t rec;

	while(1){
		while(!LL_USART_IsActiveFlag_RXNE(USART3));
 800155a:	bf00      	nop
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <Uart_Rx_Task+0x54>)
 800155e:	f7ff fc21 	bl	8000da4 <LL_USART_IsActiveFlag_RXNE>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f9      	beq.n	800155c <Uart_Rx_Task+0x8>
		rec = LL_USART_ReceiveData8(USART3);
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <Uart_Rx_Task+0x54>)
 800156a:	f7ff fc2e 	bl	8000dca <LL_USART_ReceiveData8>
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
		if(rec == 'w'|| rec == 'a'||rec == 's'||rec == 'd'){
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b77      	cmp	r3, #119	; 0x77
 8001576:	d008      	beq.n	800158a <Uart_Rx_Task+0x36>
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b61      	cmp	r3, #97	; 0x61
 800157c:	d005      	beq.n	800158a <Uart_Rx_Task+0x36>
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b73      	cmp	r3, #115	; 0x73
 8001582:	d002      	beq.n	800158a <Uart_Rx_Task+0x36>
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d10a      	bne.n	80015a0 <Uart_Rx_Task+0x4c>
			xQueueSend(ledCmdQueue, &rec, portMAX_DELAY);
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <Uart_Rx_Task+0x58>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	1df9      	adds	r1, r7, #7
 8001590:	2300      	movs	r3, #0
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	f001 ff67 	bl	8003468 <xQueueGenericSend>
			vTaskDelay(1/ portTICK_PERIOD_MS);
 800159a:	2001      	movs	r0, #1
 800159c:	f002 fbfc 	bl	8003d98 <vTaskDelay>
		}vTaskDelay(1/ portTICK_PERIOD_MS);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f002 fbf9 	bl	8003d98 <vTaskDelay>
		while(!LL_USART_IsActiveFlag_RXNE(USART3));
 80015a6:	e7d8      	b.n	800155a <Uart_Rx_Task+0x6>
 80015a8:	40004800 	.word	0x40004800
 80015ac:	20000278 	.word	0x20000278

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015e0:	f003 f822 	bl	8004628 <xTaskGetSchedulerState>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d001      	beq.n	80015ee <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015ea:	f003 facd 	bl	8004b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <LL_AHB1_GRP1_EnableClock>:
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4313      	orrs	r3, r2
 800162a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40023800 	.word	0x40023800

08001648 <LL_APB1_GRP1_EnableClock>:
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001654:	4907      	ldr	r1, [pc, #28]	; (8001674 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4313      	orrs	r3, r2
 800165a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <LL_APB1_GRP1_EnableClock+0x2c>)
 800165e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40023800 	.word	0x40023800

08001678 <LL_TIM_DisableARRPreload>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_TIM_OC_DisableFast>:
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d028      	beq.n	80016fa <LL_TIM_OC_DisableFast+0x62>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d023      	beq.n	80016f6 <LL_TIM_OC_DisableFast+0x5e>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b10      	cmp	r3, #16
 80016b2:	d01e      	beq.n	80016f2 <LL_TIM_OC_DisableFast+0x5a>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2b40      	cmp	r3, #64	; 0x40
 80016b8:	d019      	beq.n	80016ee <LL_TIM_OC_DisableFast+0x56>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c0:	d013      	beq.n	80016ea <LL_TIM_OC_DisableFast+0x52>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c8:	d00d      	beq.n	80016e6 <LL_TIM_OC_DisableFast+0x4e>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d007      	beq.n	80016e2 <LL_TIM_OC_DisableFast+0x4a>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d101      	bne.n	80016de <LL_TIM_OC_DisableFast+0x46>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00e      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016de:	2308      	movs	r3, #8
 80016e0:	e00c      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00a      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_TIM_OC_DisableFast+0x64>
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3318      	adds	r3, #24
 8001702:	4619      	mov	r1, r3
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LL_TIM_OC_DisableFast+0x9c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	440b      	add	r3, r1
 800170c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	4908      	ldr	r1, [pc, #32]	; (8001738 <LL_TIM_OC_DisableFast+0xa0>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	4619      	mov	r1, r3
 800171a:	2304      	movs	r3, #4
 800171c:	408b      	lsls	r3, r1
 800171e:	43db      	mvns	r3, r3
 8001720:	401a      	ands	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	080050e4 	.word	0x080050e4
 8001738:	080050f0 	.word	0x080050f0

0800173c <LL_TIM_OC_EnablePreload>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d028      	beq.n	800179e <LL_TIM_OC_EnablePreload+0x62>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d023      	beq.n	800179a <LL_TIM_OC_EnablePreload+0x5e>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b10      	cmp	r3, #16
 8001756:	d01e      	beq.n	8001796 <LL_TIM_OC_EnablePreload+0x5a>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d019      	beq.n	8001792 <LL_TIM_OC_EnablePreload+0x56>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001764:	d013      	beq.n	800178e <LL_TIM_OC_EnablePreload+0x52>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176c:	d00d      	beq.n	800178a <LL_TIM_OC_EnablePreload+0x4e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001774:	d007      	beq.n	8001786 <LL_TIM_OC_EnablePreload+0x4a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d101      	bne.n	8001782 <LL_TIM_OC_EnablePreload+0x46>
 800177e:	2307      	movs	r3, #7
 8001780:	e00e      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 8001782:	2308      	movs	r3, #8
 8001784:	e00c      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_TIM_OC_EnablePreload+0x64>
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3318      	adds	r3, #24
 80017a6:	4619      	mov	r1, r3
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LL_TIM_OC_EnablePreload+0x98>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	440b      	add	r3, r1
 80017b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <LL_TIM_OC_EnablePreload+0x9c>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	4619      	mov	r1, r3
 80017be:	2308      	movs	r3, #8
 80017c0:	408b      	lsls	r3, r1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	080050e4 	.word	0x080050e4
 80017d8:	080050f0 	.word	0x080050f0

080017dc <LL_TIM_SetTriggerOutput>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	605a      	str	r2, [r3, #4]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_TIM_DisableMasterSlaveMode>:
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <MX_TIM4_Init>:

/* USER CODE END 0 */

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800182a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2220      	movs	r2, #32
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fc08 	bl	8005058 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001858:	2004      	movs	r0, #4
 800185a:	f7ff fef5 	bl	8001648 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 160;
 800185e:	23a0      	movs	r3, #160	; 0xa0
 8001860:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001862:	2300      	movs	r3, #0
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <MX_TIM4_Init+0x1a4>)
 8001868:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800186e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001872:	4619      	mov	r1, r3
 8001874:	4855      	ldr	r0, [pc, #340]	; (80019cc <MX_TIM4_Init+0x1a8>)
 8001876:	f000 ffe5 	bl	8002844 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800187a:	4854      	ldr	r0, [pc, #336]	; (80019cc <MX_TIM4_Init+0x1a8>)
 800187c:	f7ff fefc 	bl	8001678 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8001880:	2101      	movs	r1, #1
 8001882:	4852      	ldr	r0, [pc, #328]	; (80019cc <MX_TIM4_Init+0x1a8>)
 8001884:	f7ff ff5a 	bl	800173c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	; 0x60
 800188a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	461a      	mov	r2, r3
 80018a2:	2101      	movs	r1, #1
 80018a4:	4849      	ldr	r0, [pc, #292]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018a6:	f001 f867 	bl	8002978 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80018aa:	2101      	movs	r1, #1
 80018ac:	4847      	ldr	r0, [pc, #284]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018ae:	f7ff fef3 	bl	8001698 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 80018b2:	2110      	movs	r1, #16
 80018b4:	4845      	ldr	r0, [pc, #276]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018b6:	f7ff ff41 	bl	800173c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	461a      	mov	r2, r3
 80018c0:	2110      	movs	r1, #16
 80018c2:	4842      	ldr	r0, [pc, #264]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018c4:	f001 f858 	bl	8002978 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80018c8:	2110      	movs	r1, #16
 80018ca:	4840      	ldr	r0, [pc, #256]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018cc:	f7ff fee4 	bl	8001698 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80018d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d4:	483d      	ldr	r0, [pc, #244]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018d6:	f7ff ff31 	bl	800173c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	461a      	mov	r2, r3
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	4839      	ldr	r0, [pc, #228]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018e6:	f001 f847 	bl	8002978 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 80018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ee:	4837      	ldr	r0, [pc, #220]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018f0:	f7ff fed2 	bl	8001698 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 80018f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f8:	4834      	ldr	r0, [pc, #208]	; (80019cc <MX_TIM4_Init+0x1a8>)
 80018fa:	f7ff ff1f 	bl	800173c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	461a      	mov	r2, r3
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	4830      	ldr	r0, [pc, #192]	; (80019cc <MX_TIM4_Init+0x1a8>)
 800190a:	f001 f835 	bl	8002978 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 800190e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <MX_TIM4_Init+0x1a8>)
 8001914:	f7ff fec0 	bl	8001698 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001918:	2100      	movs	r1, #0
 800191a:	482c      	ldr	r0, [pc, #176]	; (80019cc <MX_TIM4_Init+0x1a8>)
 800191c:	f7ff ff5e 	bl	80017dc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001920:	482a      	ldr	r0, [pc, #168]	; (80019cc <MX_TIM4_Init+0x1a8>)
 8001922:	f7ff ff6e 	bl	8001802 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001926:	2008      	movs	r0, #8
 8001928:	f7ff fe76 	bl	8001618 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800192c:	2002      	movs	r0, #2
 800192e:	f7ff fe73 	bl	8001618 <LL_AHB1_GRP1_EnableClock>
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PB6     ------> TIM4_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001938:	2302      	movs	r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	481f      	ldr	r0, [pc, #124]	; (80019d0 <MX_TIM4_Init+0x1ac>)
 8001952:	f000 fa29 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800195c:	2302      	movs	r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MX_TIM4_Init+0x1ac>)
 8001976:	f000 fa17 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800197a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001980:	2302      	movs	r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_TIM4_Init+0x1ac>)
 800199a:	f000 fa05 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800199e:	2340      	movs	r3, #64	; 0x40
 80019a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019a2:	2302      	movs	r3, #2
 80019a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM4_Init+0x1b0>)
 80019bc:	f000 f9f4 	bl	8001da8 <LL_GPIO_Init>

}
 80019c0:	bf00      	nop
 80019c2:	3750      	adds	r7, #80	; 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fff003e8 	.word	0xfff003e8
 80019cc:	40000800 	.word	0x40000800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40020400 	.word	0x40020400

080019d8 <LL_AHB1_GRP1_EnableClock>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40023800 	.word	0x40023800

08001a08 <LL_APB1_GRP1_EnableClock>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40023800 	.word	0x40023800

08001a38 <LL_USART_Enable>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_USART_ConfigAsyncMode>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	609a      	str	r2, [r3, #8]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001aae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ab2:	f7ff ffa9 	bl	8001a08 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001ab6:	2008      	movs	r0, #8
 8001ab8:	f7ff ff8e 	bl	80019d8 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <MX_USART3_UART_Init+0xc0>)
 8001adc:	f000 f964 	bl	8001da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001af6:	2307      	movs	r3, #7
 8001af8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4811      	ldr	r0, [pc, #68]	; (8001b44 <MX_USART3_UART_Init+0xc0>)
 8001b00:	f000 f952 	bl	8001da8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b08:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b16:	230c      	movs	r3, #12
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_USART3_UART_Init+0xc4>)
 8001b2a:	f001 fa45 	bl	8002fb8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_USART3_UART_Init+0xc4>)
 8001b30:	f7ff ff92 	bl	8001a58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_USART3_UART_Init+0xc4>)
 8001b36:	f7ff ff7f 	bl	8001a38 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	3738      	adds	r7, #56	; 0x38
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40004800 	.word	0x40004800

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff fd3d 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f003 fa3b 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff f94f 	bl	8000e20 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001b90:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 8001b94:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001b98:	20003fcc 	.word	0x20003fcc

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>

08001b9e <LL_GPIO_SetPinMode>:
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b089      	sub	sp, #36	; 0x24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	61bb      	str	r3, [r7, #24]
  return result;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	431a      	orrs	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	601a      	str	r2, [r3, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_GPIO_SetPinOutputType>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	401a      	ands	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_GPIO_SetPinSpeed>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	613b      	str	r3, [r7, #16]
  return result;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2103      	movs	r1, #3
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	61bb      	str	r3, [r7, #24]
  return result;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	609a      	str	r2, [r3, #8]
}
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_GPIO_SetPinPull>:
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b089      	sub	sp, #36	; 0x24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	613b      	str	r3, [r7, #16]
  return result;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	61bb      	str	r3, [r7, #24]
  return result;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	60da      	str	r2, [r3, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3724      	adds	r7, #36	; 0x24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_GPIO_SetAFPin_0_7>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a1a      	ldr	r2, [r3, #32]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	613b      	str	r3, [r7, #16]
  return result;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	210f      	movs	r1, #15
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	61bb      	str	r3, [r7, #24]
  return result;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	621a      	str	r2, [r3, #32]
}
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_GPIO_SetAFPin_8_15>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	b089      	sub	sp, #36	; 0x24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	613b      	str	r3, [r7, #16]
  return result;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	210f      	movs	r1, #15
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	61bb      	str	r3, [r7, #24]
  return result;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	431a      	orrs	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d9c:	bf00      	nop
 8001d9e:	3724      	adds	r7, #36	; 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	613b      	str	r3, [r7, #16]
  return result;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001dd2:	e051      	b.n	8001e78 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d043      	beq.n	8001e72 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d003      	beq.n	8001dfa <LL_GPIO_Init+0x52>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d10e      	bne.n	8001e18 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	69b9      	ldr	r1, [r7, #24]
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff12 	bl	8001c2c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	461a      	mov	r2, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fef2 	bl	8001bfc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff32 	bl	8001c8a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d11a      	bne.n	8001e64 <LL_GPIO_Init+0xbc>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	60bb      	str	r3, [r7, #8]
  return result;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	d807      	bhi.n	8001e56 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff4a 	bl	8001ce8 <LL_GPIO_SetAFPin_0_7>
 8001e54:	e006      	b.n	8001e64 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	69b9      	ldr	r1, [r7, #24]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff71 	bl	8001d46 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fe96 	bl	8001b9e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1a6      	bne.n	8001dd4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <LL_I2C_Enable>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_I2C_Disable>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0201 	bic.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_I2C_ConfigFilters>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0219      	lsls	r1, r3, #8
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <LL_I2C_SetOwnAddress1>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <LL_I2C_SetOwnAddress1+0x2c>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	fffff800 	.word	0xfffff800

08001f30 <LL_I2C_EnableOwnAddress1>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_I2C_DisableOwnAddress1>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_I2C_SetTiming>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_I2C_SetMode>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	601a      	str	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	605a      	str	r2, [r3, #4]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff64 	bl	8001eb0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff6c 	bl	8001ed0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffb6 	bl	8001f70 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff43 	bl	8001e90 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa0 	bl	8001f50 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6919      	ldr	r1, [r3, #16]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	461a      	mov	r2, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff70 	bl	8001f00 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff81 	bl	8001f30 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffa9 	bl	8001f8c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4619      	mov	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffb6 	bl	8001fb2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <LL_RCC_HSI_IsReady>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <LL_RCC_HSI_IsReady+0x20>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40023800 	.word	0x40023800

08002074 <LL_RCC_LSE_IsReady>:
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <LL_RCC_LSE_IsReady+0x20>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b02      	cmp	r3, #2
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40023800 	.word	0x40023800

08002098 <LL_RCC_GetSysClkSource>:
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <LL_RCC_GetSysClkSource+0x18>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <LL_RCC_GetAHBPrescaler>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <LL_RCC_GetAHBPrescaler+0x18>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <LL_RCC_GetAPB1Prescaler>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <LL_RCC_GetAPB2Prescaler>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <LL_RCC_GetAPB2Prescaler+0x18>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <LL_RCC_GetUSARTClockSource+0x24>)
 8002112:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	4313      	orrs	r3, r2
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40023800 	.word	0x40023800

08002130 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <LL_RCC_GetUARTClockSource+0x24>)
 800213a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	401a      	ands	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	4313      	orrs	r3, r2
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40023800 	.word	0x40023800

08002158 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <LL_RCC_PLL_GetMainSource+0x18>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <LL_RCC_PLL_GetN+0x18>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023800 	.word	0x40023800

08002190 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <LL_RCC_PLL_GetP+0x18>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <LL_RCC_PLL_GetDivider+0x18>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d133      	bne.n	8002242 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff94 	bl	8002108 <LL_RCC_GetUSARTClockSource>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80021e6:	d016      	beq.n	8002216 <LL_RCC_GetUSARTClockFreq+0x4e>
 80021e8:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80021ec:	d81d      	bhi.n	800222a <LL_RCC_GetUSARTClockFreq+0x62>
 80021ee:	4a71      	ldr	r2, [pc, #452]	; (80023b4 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <LL_RCC_GetUSARTClockFreq+0x34>
 80021f4:	4a70      	ldr	r2, [pc, #448]	; (80023b8 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <LL_RCC_GetUSARTClockFreq+0x3c>
 80021fa:	e016      	b.n	800222a <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80021fc:	f000 f9f6 	bl	80025ec <RCC_GetSystemClockFreq>
 8002200:	60f8      	str	r0, [r7, #12]
        break;
 8002202:	e0d1      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002204:	f7ff ff24 	bl	8002050 <LL_RCC_HSI_IsReady>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80bb 	beq.w	8002386 <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8002212:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002214:	e0b7      	b.n	8002386 <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002216:	f7ff ff2d 	bl	8002074 <LL_RCC_LSE_IsReady>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80b4 	beq.w	800238a <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 8002222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002226:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002228:	e0af      	b.n	800238a <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800222a:	f000 f9df 	bl	80025ec <RCC_GetSystemClockFreq>
 800222e:	4603      	mov	r3, r0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa03 	bl	800263c <RCC_GetHCLKClockFreq>
 8002236:	4603      	mov	r3, r0
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fa29 	bl	8002690 <RCC_GetPCLK2ClockFreq>
 800223e:	60f8      	str	r0, [r7, #12]
        break;
 8002240:	e0b2      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d133      	bne.n	80022b0 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff5d 	bl	8002108 <LL_RCC_GetUSARTClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8002254:	d016      	beq.n	8002284 <LL_RCC_GetUSARTClockFreq+0xbc>
 8002256:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800225a:	d81d      	bhi.n	8002298 <LL_RCC_GetUSARTClockFreq+0xd0>
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <LL_RCC_GetUSARTClockFreq+0xa2>
 8002262:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <LL_RCC_GetUSARTClockFreq+0xaa>
 8002268:	e016      	b.n	8002298 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800226a:	f000 f9bf 	bl	80025ec <RCC_GetSystemClockFreq>
 800226e:	60f8      	str	r0, [r7, #12]
        break;
 8002270:	e09a      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002272:	f7ff feed 	bl	8002050 <LL_RCC_HSI_IsReady>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8088 	beq.w	800238e <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8002280:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002282:	e084      	b.n	800238e <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002284:	f7ff fef6 	bl	8002074 <LL_RCC_LSE_IsReady>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8081 	beq.w	8002392 <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 8002290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002294:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002296:	e07c      	b.n	8002392 <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002298:	f000 f9a8 	bl	80025ec <RCC_GetSystemClockFreq>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f9cc 	bl	800263c <RCC_GetHCLKClockFreq>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f9de 	bl	8002668 <RCC_GetPCLK1ClockFreq>
 80022ac:	60f8      	str	r0, [r7, #12]
        break;
 80022ae:	e07b      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80022b6:	d131      	bne.n	800231c <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff25 	bl	8002108 <LL_RCC_GetUSARTClockSource>
 80022be:	4603      	mov	r3, r0
 80022c0:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 80022c4:	d015      	beq.n	80022f2 <LL_RCC_GetUSARTClockFreq+0x12a>
 80022c6:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 80022ca:	d81b      	bhi.n	8002304 <LL_RCC_GetUSARTClockFreq+0x13c>
 80022cc:	4a3e      	ldr	r2, [pc, #248]	; (80023c8 <LL_RCC_GetUSARTClockFreq+0x200>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <LL_RCC_GetUSARTClockFreq+0x112>
 80022d2:	4a3e      	ldr	r2, [pc, #248]	; (80023cc <LL_RCC_GetUSARTClockFreq+0x204>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <LL_RCC_GetUSARTClockFreq+0x11a>
 80022d8:	e014      	b.n	8002304 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80022da:	f000 f987 	bl	80025ec <RCC_GetSystemClockFreq>
 80022de:	60f8      	str	r0, [r7, #12]
        break;
 80022e0:	e062      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80022e2:	f7ff feb5 	bl	8002050 <LL_RCC_HSI_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d054      	beq.n	8002396 <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <LL_RCC_GetUSARTClockFreq+0x1f4>)
 80022ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022f0:	e051      	b.n	8002396 <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80022f2:	f7ff febf 	bl	8002074 <LL_RCC_LSE_IsReady>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d04e      	beq.n	800239a <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 80022fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002300:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002302:	e04a      	b.n	800239a <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002304:	f000 f972 	bl	80025ec <RCC_GetSystemClockFreq>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f996 	bl	800263c <RCC_GetHCLKClockFreq>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f9bc 	bl	8002690 <RCC_GetPCLK2ClockFreq>
 8002318:	60f8      	str	r0, [r7, #12]
        break;
 800231a:	e045      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b30      	cmp	r3, #48	; 0x30
 8002320:	d13d      	bne.n	800239e <LL_RCC_GetUSARTClockFreq+0x1d6>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fef0 	bl	8002108 <LL_RCC_GetUSARTClockSource>
 8002328:	4603      	mov	r3, r0
 800232a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800232e:	d015      	beq.n	800235c <LL_RCC_GetUSARTClockFreq+0x194>
 8002330:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002334:	d81b      	bhi.n	800236e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <LL_RCC_GetUSARTClockFreq+0x208>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <LL_RCC_GetUSARTClockFreq+0x17c>
 800233c:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <LL_RCC_GetUSARTClockFreq+0x20c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <LL_RCC_GetUSARTClockFreq+0x184>
 8002342:	e014      	b.n	800236e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002344:	f000 f952 	bl	80025ec <RCC_GetSystemClockFreq>
 8002348:	60f8      	str	r0, [r7, #12]
          break;
 800234a:	e02d      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800234c:	f7ff fe80 	bl	8002050 <LL_RCC_HSI_IsReady>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = HSI_VALUE;
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8002358:	60fb      	str	r3, [r7, #12]
          }
          break;
 800235a:	e022      	b.n	80023a2 <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800235c:	f7ff fe8a 	bl	8002074 <LL_RCC_LSE_IsReady>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01f      	beq.n	80023a6 <LL_RCC_GetUSARTClockFreq+0x1de>
          {
            usart_frequency = LSE_VALUE;
 8002366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800236a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800236c:	e01b      	b.n	80023a6 <LL_RCC_GetUSARTClockFreq+0x1de>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800236e:	f000 f93d 	bl	80025ec <RCC_GetSystemClockFreq>
 8002372:	4603      	mov	r3, r0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f961 	bl	800263c <RCC_GetHCLKClockFreq>
 800237a:	4603      	mov	r3, r0
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f973 	bl	8002668 <RCC_GetPCLK1ClockFreq>
 8002382:	60f8      	str	r0, [r7, #12]
          break;
 8002384:	e010      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 8002386:	bf00      	nop
 8002388:	e00e      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 800238a:	bf00      	nop
 800238c:	e00c      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 800238e:	bf00      	nop
 8002390:	e00a      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 8002392:	bf00      	nop
 8002394:	e008      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 8002396:	bf00      	nop
 8002398:	e006      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
        break;
 800239a:	bf00      	nop
 800239c:	e004      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
      }
    }
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
          break;
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <LL_RCC_GetUSARTClockFreq+0x1e0>
          break;
 80023a6:	bf00      	nop
  }
  return usart_frequency;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	00030001 	.word	0x00030001
 80023b8:	00030002 	.word	0x00030002
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	000c0004 	.word	0x000c0004
 80023c4:	000c0008 	.word	0x000c0008
 80023c8:	0c000400 	.word	0x0c000400
 80023cc:	0c000800 	.word	0x0c000800
 80023d0:	00300010 	.word	0x00300010
 80023d4:	00300020 	.word	0x00300020

080023d8 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2bc0      	cmp	r3, #192	; 0xc0
 80023e8:	d133      	bne.n	8002452 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fea0 	bl	8002130 <LL_RCC_GetUARTClockSource>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80023f6:	d016      	beq.n	8002426 <LL_RCC_GetUARTClockFreq+0x4e>
 80023f8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80023fc:	d81d      	bhi.n	800243a <LL_RCC_GetUARTClockFreq+0x62>
 80023fe:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <LL_RCC_GetUARTClockFreq+0x1f0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <LL_RCC_GetUARTClockFreq+0x34>
 8002404:	4a71      	ldr	r2, [pc, #452]	; (80025cc <LL_RCC_GetUARTClockFreq+0x1f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <LL_RCC_GetUARTClockFreq+0x3c>
 800240a:	e016      	b.n	800243a <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800240c:	f000 f8ee 	bl	80025ec <RCC_GetSystemClockFreq>
 8002410:	60f8      	str	r0, [r7, #12]
        break;
 8002412:	e0d3      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002414:	f7ff fe1c 	bl	8002050 <LL_RCC_HSI_IsReady>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80bd 	beq.w	800259a <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 8002420:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8002422:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002424:	e0b9      	b.n	800259a <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002426:	f7ff fe25 	bl	8002074 <LL_RCC_LSE_IsReady>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80b6 	beq.w	800259e <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 8002432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002436:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002438:	e0b1      	b.n	800259e <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800243a:	f000 f8d7 	bl	80025ec <RCC_GetSystemClockFreq>
 800243e:	4603      	mov	r3, r0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f8fb 	bl	800263c <RCC_GetHCLKClockFreq>
 8002446:	4603      	mov	r3, r0
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f90d 	bl	8002668 <RCC_GetPCLK1ClockFreq>
 800244e:	60f8      	str	r0, [r7, #12]
        break;
 8002450:	e0b4      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002458:	d133      	bne.n	80024c2 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fe68 	bl	8002130 <LL_RCC_GetUARTClockSource>
 8002460:	4603      	mov	r3, r0
 8002462:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002466:	d016      	beq.n	8002496 <LL_RCC_GetUARTClockFreq+0xbe>
 8002468:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800246c:	d81d      	bhi.n	80024aa <LL_RCC_GetUARTClockFreq+0xd2>
 800246e:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <LL_RCC_GetUARTClockFreq+0x1fc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <LL_RCC_GetUARTClockFreq+0xa4>
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <LL_RCC_GetUARTClockFreq+0x200>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <LL_RCC_GetUARTClockFreq+0xac>
 800247a:	e016      	b.n	80024aa <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800247c:	f000 f8b6 	bl	80025ec <RCC_GetSystemClockFreq>
 8002480:	60f8      	str	r0, [r7, #12]
        break;
 8002482:	e09b      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002484:	f7ff fde4 	bl	8002050 <LL_RCC_HSI_IsReady>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8089 	beq.w	80025a2 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8002490:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8002492:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002494:	e085      	b.n	80025a2 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002496:	f7ff fded 	bl	8002074 <LL_RCC_LSE_IsReady>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8082 	beq.w	80025a6 <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024a8:	e07d      	b.n	80025a6 <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024aa:	f000 f89f 	bl	80025ec <RCC_GetSystemClockFreq>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f8c3 	bl	800263c <RCC_GetHCLKClockFreq>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f8d5 	bl	8002668 <RCC_GetPCLK1ClockFreq>
 80024be:	60f8      	str	r0, [r7, #12]
        break;
 80024c0:	e07c      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024c8:	d131      	bne.n	800252e <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fe30 	bl	8002130 <LL_RCC_GetUARTClockSource>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 80024d6:	d015      	beq.n	8002504 <LL_RCC_GetUARTClockFreq+0x12c>
 80024d8:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 80024dc:	d81b      	bhi.n	8002516 <LL_RCC_GetUARTClockFreq+0x13e>
 80024de:	4a3f      	ldr	r2, [pc, #252]	; (80025dc <LL_RCC_GetUARTClockFreq+0x204>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <LL_RCC_GetUARTClockFreq+0x114>
 80024e4:	4a3e      	ldr	r2, [pc, #248]	; (80025e0 <LL_RCC_GetUARTClockFreq+0x208>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <LL_RCC_GetUARTClockFreq+0x11c>
 80024ea:	e014      	b.n	8002516 <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80024ec:	f000 f87e 	bl	80025ec <RCC_GetSystemClockFreq>
 80024f0:	60f8      	str	r0, [r7, #12]
        break;
 80024f2:	e063      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80024f4:	f7ff fdac 	bl	8002050 <LL_RCC_HSI_IsReady>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d055      	beq.n	80025aa <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8002500:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002502:	e052      	b.n	80025aa <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002504:	f7ff fdb6 	bl	8002074 <LL_RCC_LSE_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04f      	beq.n	80025ae <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 800250e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002512:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002514:	e04b      	b.n	80025ae <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002516:	f000 f869 	bl	80025ec <RCC_GetSystemClockFreq>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f88d 	bl	800263c <RCC_GetHCLKClockFreq>
 8002522:	4603      	mov	r3, r0
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f89f 	bl	8002668 <RCC_GetPCLK1ClockFreq>
 800252a:	60f8      	str	r0, [r7, #12]
        break;
 800252c:	e046      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002534:	d13d      	bne.n	80025b2 <LL_RCC_GetUARTClockFreq+0x1da>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fdfa 	bl	8002130 <LL_RCC_GetUARTClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 8002542:	d015      	beq.n	8002570 <LL_RCC_GetUARTClockFreq+0x198>
 8002544:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 8002548:	d81b      	bhi.n	8002582 <LL_RCC_GetUARTClockFreq+0x1aa>
 800254a:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <LL_RCC_GetUARTClockFreq+0x20c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <LL_RCC_GetUARTClockFreq+0x180>
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <LL_RCC_GetUARTClockFreq+0x210>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <LL_RCC_GetUARTClockFreq+0x188>
 8002556:	e014      	b.n	8002582 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8002558:	f000 f848 	bl	80025ec <RCC_GetSystemClockFreq>
 800255c:	60f8      	str	r0, [r7, #12]
          break;
 800255e:	e02d      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8002560:	f7ff fd76 	bl	8002050 <LL_RCC_HSI_IsReady>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d025      	beq.n	80025b6 <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = HSI_VALUE;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <LL_RCC_GetUARTClockFreq+0x1f8>)
 800256c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800256e:	e022      	b.n	80025b6 <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8002570:	f7ff fd80 	bl	8002074 <LL_RCC_LSE_IsReady>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01f      	beq.n	80025ba <LL_RCC_GetUARTClockFreq+0x1e2>
          {
            uart_frequency = LSE_VALUE;
 800257a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800257e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002580:	e01b      	b.n	80025ba <LL_RCC_GetUARTClockFreq+0x1e2>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002582:	f000 f833 	bl	80025ec <RCC_GetSystemClockFreq>
 8002586:	4603      	mov	r3, r0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f857 	bl	800263c <RCC_GetHCLKClockFreq>
 800258e:	4603      	mov	r3, r0
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f869 	bl	8002668 <RCC_GetPCLK1ClockFreq>
 8002596:	60f8      	str	r0, [r7, #12]
          break;
 8002598:	e010      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 800259a:	bf00      	nop
 800259c:	e00e      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 800259e:	bf00      	nop
 80025a0:	e00c      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80025a2:	bf00      	nop
 80025a4:	e00a      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80025a6:	bf00      	nop
 80025a8:	e008      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80025aa:	bf00      	nop
 80025ac:	e006      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
        break;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
      }
    }
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
          break;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <LL_RCC_GetUARTClockFreq+0x1e4>
          break;
 80025ba:	bf00      	nop
  }
  return uart_frequency;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00c00040 	.word	0x00c00040
 80025cc:	00c00080 	.word	0x00c00080
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	03000100 	.word	0x03000100
 80025d8:	03000200 	.word	0x03000200
 80025dc:	30001000 	.word	0x30001000
 80025e0:	30002000 	.word	0x30002000
 80025e4:	c0004000 	.word	0xc0004000
 80025e8:	c0008000 	.word	0xc0008000

080025ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80025f6:	f7ff fd4f 	bl	8002098 <LL_RCC_GetSysClkSource>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d00c      	beq.n	800261a <RCC_GetSystemClockFreq+0x2e>
 8002600:	2b08      	cmp	r3, #8
 8002602:	d80e      	bhi.n	8002622 <RCC_GetSystemClockFreq+0x36>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <RCC_GetSystemClockFreq+0x22>
 8002608:	2b04      	cmp	r3, #4
 800260a:	d003      	beq.n	8002614 <RCC_GetSystemClockFreq+0x28>
 800260c:	e009      	b.n	8002622 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <RCC_GetSystemClockFreq+0x48>)
 8002610:	607b      	str	r3, [r7, #4]
      break;
 8002612:	e009      	b.n	8002628 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <RCC_GetSystemClockFreq+0x4c>)
 8002616:	607b      	str	r3, [r7, #4]
      break;
 8002618:	e006      	b.n	8002628 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800261a:	f000 f84d 	bl	80026b8 <RCC_PLL_GetFreqDomain_SYS>
 800261e:	6078      	str	r0, [r7, #4]
      break;
 8002620:	e002      	b.n	8002628 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <RCC_GetSystemClockFreq+0x48>)
 8002624:	607b      	str	r3, [r7, #4]
      break;
 8002626:	bf00      	nop
  }

  return frequency;
 8002628:	687b      	ldr	r3, [r7, #4]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	00f42400 	.word	0x00f42400
 8002638:	017d7840 	.word	0x017d7840

0800263c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002644:	f7ff fd36 	bl	80020b4 <LL_RCC_GetAHBPrescaler>
 8002648:	4603      	mov	r3, r0
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <RCC_GetHCLKClockFreq+0x28>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	461a      	mov	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	40d3      	lsrs	r3, r2
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	080050cc 	.word	0x080050cc

08002668 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002670:	f7ff fd2e 	bl	80020d0 <LL_RCC_GetAPB1Prescaler>
 8002674:	4603      	mov	r3, r0
 8002676:	0a9b      	lsrs	r3, r3, #10
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <RCC_GetPCLK1ClockFreq+0x24>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	40d3      	lsrs	r3, r2
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	080050dc 	.word	0x080050dc

08002690 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002698:	f7ff fd28 	bl	80020ec <LL_RCC_GetAPB2Prescaler>
 800269c:	4603      	mov	r3, r0
 800269e:	0b5b      	lsrs	r3, r3, #13
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	40d3      	lsrs	r3, r2
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	080050dc 	.word	0x080050dc

080026b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	2300      	movs	r3, #0
 80026c4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80026c6:	f7ff fd47 	bl	8002158 <LL_RCC_PLL_GetMainSource>
 80026ca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d8:	d003      	beq.n	80026e2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80026da:	e005      	b.n	80026e8 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80026de:	607b      	str	r3, [r7, #4]
      break;
 80026e0:	e005      	b.n	80026ee <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80026e4:	607b      	str	r3, [r7, #4]
      break;
 80026e6:	e002      	b.n	80026ee <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80026ea:	607b      	str	r3, [r7, #4]
      break;
 80026ec:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80026ee:	f7ff fd5d 	bl	80021ac <LL_RCC_PLL_GetDivider>
 80026f2:	4602      	mov	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80026fa:	f7ff fd3b 	bl	8002174 <LL_RCC_PLL_GetN>
 80026fe:	4603      	mov	r3, r0
 8002700:	fb03 f404 	mul.w	r4, r3, r4
 8002704:	f7ff fd44 	bl	8002190 <LL_RCC_PLL_GetP>
 8002708:	4603      	mov	r3, r0
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	3301      	adds	r3, #1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	00f42400 	.word	0x00f42400
 8002720:	017d7840 	.word	0x017d7840

08002724 <LL_TIM_SetPrescaler>:
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_TIM_SetAutoReload>:
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_TIM_SetRepetitionCounter>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_TIM_OC_SetCompareCH1>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_TIM_OC_SetCompareCH2>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_TIM_OC_SetCompareCH3>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_TIM_OC_SetCompareCH4>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_TIM_OC_SetCompareCH5>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_TIM_OC_SetCompareCH6>:
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_TIM_GenerateEvent_UPDATE>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	615a      	str	r2, [r3, #20]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3d      	ldr	r2, [pc, #244]	; (800294c <LL_TIM_Init+0x108>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <LL_TIM_Init+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d00f      	beq.n	8002884 <LL_TIM_Init+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <LL_TIM_Init+0x10c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00b      	beq.n	8002884 <LL_TIM_Init+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a39      	ldr	r2, [pc, #228]	; (8002954 <LL_TIM_Init+0x110>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <LL_TIM_Init+0x40>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a38      	ldr	r2, [pc, #224]	; (8002958 <LL_TIM_Init+0x114>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <LL_TIM_Init+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a37      	ldr	r2, [pc, #220]	; (800295c <LL_TIM_Init+0x118>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d106      	bne.n	8002892 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2d      	ldr	r2, [pc, #180]	; (800294c <LL_TIM_Init+0x108>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02b      	beq.n	80028f2 <LL_TIM_Init+0xae>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d027      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <LL_TIM_Init+0x10c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d023      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a29      	ldr	r2, [pc, #164]	; (8002954 <LL_TIM_Init+0x110>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01f      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a28      	ldr	r2, [pc, #160]	; (8002958 <LL_TIM_Init+0x114>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01b      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a27      	ldr	r2, [pc, #156]	; (800295c <LL_TIM_Init+0x118>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d017      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a26      	ldr	r2, [pc, #152]	; (8002960 <LL_TIM_Init+0x11c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a25      	ldr	r2, [pc, #148]	; (8002964 <LL_TIM_Init+0x120>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00f      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <LL_TIM_Init+0x124>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <LL_TIM_Init+0x128>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a22      	ldr	r2, [pc, #136]	; (8002970 <LL_TIM_Init+0x12c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <LL_TIM_Init+0xae>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <LL_TIM_Init+0x130>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d106      	bne.n	8002900 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff17 	bl	8002740 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff03 	bl	8002724 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <LL_TIM_Init+0x108>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <LL_TIM_Init+0xea>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <LL_TIM_Init+0x118>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d105      	bne.n	800293a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff11 	bl	800275c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff72 	bl	8002824 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800
 8002958:	40000c00 	.word	0x40000c00
 800295c:	40010400 	.word	0x40010400
 8002960:	40014000 	.word	0x40014000
 8002964:	40014400 	.word	0x40014400
 8002968:	40014800 	.word	0x40014800
 800296c:	40001800 	.word	0x40001800
 8002970:	40001c00 	.word	0x40001c00
 8002974:	40002000 	.word	0x40002000

08002978 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298e:	d045      	beq.n	8002a1c <LL_TIM_OC_Init+0xa4>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002996:	d848      	bhi.n	8002a2a <LL_TIM_OC_Init+0xb2>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d036      	beq.n	8002a0e <LL_TIM_OC_Init+0x96>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d840      	bhi.n	8002a2a <LL_TIM_OC_Init+0xb2>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ae:	d027      	beq.n	8002a00 <LL_TIM_OC_Init+0x88>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b6:	d838      	bhi.n	8002a2a <LL_TIM_OC_Init+0xb2>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	d018      	beq.n	80029f2 <LL_TIM_OC_Init+0x7a>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d830      	bhi.n	8002a2a <LL_TIM_OC_Init+0xb2>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d003      	beq.n	80029d6 <LL_TIM_OC_Init+0x5e>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d007      	beq.n	80029e4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80029d4:	e029      	b.n	8002a2a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f82d 	bl	8002a38 <OC1Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	75fb      	strb	r3, [r7, #23]
      break;
 80029e2:	e023      	b.n	8002a2c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f894 	bl	8002b14 <OC2Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	75fb      	strb	r3, [r7, #23]
      break;
 80029f0:	e01c      	b.n	8002a2c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8ff 	bl	8002bf8 <OC3Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]
      break;
 80029fe:	e015      	b.n	8002a2c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f96a 	bl	8002cdc <OC4Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0c:	e00e      	b.n	8002a2c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f9bd 	bl	8002d90 <OC5Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1a:	e007      	b.n	8002a2c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa08 	bl	8002e34 <OC6Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]
      break;
 8002a28:	e000      	b.n	8002a2c <LL_TIM_OC_Init+0xb4>
      break;
 8002a2a:	bf00      	nop
  }

  return result;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f023 0201 	bic.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <OC1Config+0xd0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 0202 	bic.w	r2, r3, #2
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <OC1Config+0xd4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d003      	beq.n	8002aa2 <OC1Config+0x6a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <OC1Config+0xd8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11e      	bne.n	8002ae0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 0208 	bic.w	r2, r3, #8
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 0204 	bic.w	r2, r3, #4
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fe40 	bl	8002778 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	fffeff8f 	.word	0xfffeff8f
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40010400 	.word	0x40010400

08002b14 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0210 	bic.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <OC2Config+0xd8>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	0212      	lsls	r2, r2, #8
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0220 	bic.w	r2, r3, #32
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0210 	bic.w	r2, r3, #16
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <OC2Config+0xdc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <OC2Config+0x70>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <OC2Config+0xe0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d11f      	bne.n	8002bc4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	019b      	lsls	r3, r3, #6
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	019b      	lsls	r3, r3, #6
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fddc 	bl	8002794 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	feff8fff 	.word	0xfeff8fff
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <OC3Config+0xd8>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <OC3Config+0xdc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <OC3Config+0x6e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <OC3Config+0xe0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d11f      	bne.n	8002ca6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	015b      	lsls	r3, r3, #5
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fd79 	bl	80027b0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	fffeff8f 	.word	0xfffeff8f
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40010400 	.word	0x40010400

08002cdc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <OC4Config+0xa8>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	0212      	lsls	r2, r2, #8
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	031b      	lsls	r3, r3, #12
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <OC4Config+0xac>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <OC4Config+0x70>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <OC4Config+0xb0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d107      	bne.n	8002d5c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	019b      	lsls	r3, r3, #6
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fd2c 	bl	80027cc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	feff8fff 	.word	0xfeff8fff
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	40010400 	.word	0x40010400

08002d90 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <OC5Config+0x98>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <OC5Config+0x9c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <OC5Config+0x60>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <OC5Config+0xa0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d109      	bne.n	8002e04 <OC5Config+0x74>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fce9 	bl	80027e8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	fffeff8f 	.word	0xfffeff8f
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40010400 	.word	0x40010400

08002e34 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <OC6Config+0x98>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	0212      	lsls	r2, r2, #8
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	051b      	lsls	r3, r3, #20
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	051b      	lsls	r3, r3, #20
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <OC6Config+0x9c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <OC6Config+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <OC6Config+0xa0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d109      	bne.n	8002eaa <OC6Config+0x76>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fca6 	bl	8002808 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	feff8fff 	.word	0xfeff8fff
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <LL_USART_IsEnabled>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <LL_USART_IsEnabled+0x18>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <LL_USART_IsEnabled+0x1a>
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_USART_SetStopBitsLength>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	605a      	str	r2, [r3, #4]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_USART_SetHWFlowCtrl>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_USART_SetBaudRate>:
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b087      	sub	sp, #28
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5e:	d11a      	bne.n	8002f96 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	005a      	lsls	r2, r3, #1
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	441a      	add	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	60da      	str	r2, [r3, #12]
}
 8002f94:	e00a      	b.n	8002fac <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	085a      	lsrs	r2, r3, #1
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	441a      	add	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ff84 	bl	8002ed8 <LL_USART_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d179      	bne.n	80030ca <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <LL_USART_Init+0x11c>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	6851      	ldr	r1, [r2, #4]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	6912      	ldr	r2, [r2, #16]
 8002fec:	4311      	orrs	r1, r2
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	6992      	ldr	r2, [r2, #24]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff7c 	bl	8002efe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff89 	bl	8002f24 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <LL_USART_Init+0x120>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d104      	bne.n	8003024 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800301a:	2003      	movs	r0, #3
 800301c:	f7ff f8d4 	bl	80021c8 <LL_RCC_GetUSARTClockFreq>
 8003020:	60b8      	str	r0, [r7, #8]
 8003022:	e041      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <LL_USART_Init+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d104      	bne.n	8003036 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800302c:	200c      	movs	r0, #12
 800302e:	f7ff f8cb 	bl	80021c8 <LL_RCC_GetUSARTClockFreq>
 8003032:	60b8      	str	r0, [r7, #8]
 8003034:	e038      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <LL_USART_Init+0x128>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d104      	bne.n	8003048 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800303e:	2030      	movs	r0, #48	; 0x30
 8003040:	f7ff f8c2 	bl	80021c8 <LL_RCC_GetUSARTClockFreq>
 8003044:	60b8      	str	r0, [r7, #8]
 8003046:	e02f      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <LL_USART_Init+0x12c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d104      	bne.n	800305a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003050:	20c0      	movs	r0, #192	; 0xc0
 8003052:	f7ff f9c1 	bl	80023d8 <LL_RCC_GetUARTClockFreq>
 8003056:	60b8      	str	r0, [r7, #8]
 8003058:	e026      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <LL_USART_Init+0x130>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d105      	bne.n	800306e <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003062:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003066:	f7ff f9b7 	bl	80023d8 <LL_RCC_GetUARTClockFreq>
 800306a:	60b8      	str	r0, [r7, #8]
 800306c:	e01c      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <LL_USART_Init+0x134>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d105      	bne.n	8003082 <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8003076:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800307a:	f7ff f8a5 	bl	80021c8 <LL_RCC_GetUSARTClockFreq>
 800307e:	60b8      	str	r0, [r7, #8]
 8003080:	e012      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <LL_USART_Init+0x138>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d105      	bne.n	8003096 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800308a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800308e:	f7ff f9a3 	bl	80023d8 <LL_RCC_GetUARTClockFreq>
 8003092:	60b8      	str	r0, [r7, #8]
 8003094:	e008      	b.n	80030a8 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <LL_USART_Init+0x13c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d104      	bne.n	80030a8 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800309e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80030a2:	f7ff f999 	bl	80023d8 <LL_RCC_GetUARTClockFreq>
 80030a6:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff40 	bl	8002f4a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	efff69f3 	.word	0xefff69f3
 80030d8:	40011000 	.word	0x40011000
 80030dc:	40004400 	.word	0x40004400
 80030e0:	40004800 	.word	0x40004800
 80030e4:	40004c00 	.word	0x40004c00
 80030e8:	40005000 	.word	0x40005000
 80030ec:	40011400 	.word	0x40011400
 80030f0:	40007800 	.word	0x40007800
 80030f4:	40007c00 	.word	0x40007c00

080030f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <LL_InitTick+0x30>)
 800310c:	3b01      	subs	r3, #1
 800310e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_InitTick+0x30>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <LL_InitTick+0x30>)
 8003118:	2205      	movs	r2, #5
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e010 	.word	0xe000e010

0800312c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffdd 	bl	80030f8 <LL_InitTick>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <LL_SetSystemCoreClock+0x1c>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000

08003168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f103 0208 	add.w	r2, r3, #8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f103 0208 	add.w	r2, r3, #8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f103 0208 	add.w	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d103      	bne.n	800322a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e00c      	b.n	8003244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3308      	adds	r3, #8
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e002      	b.n	8003238 <vListInsert+0x2e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d2f6      	bcs.n	8003232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6892      	ldr	r2, [r2, #8]
 8003292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6852      	ldr	r2, [r2, #4]
 800329c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d103      	bne.n	80032b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1e5a      	subs	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10c      	bne.n	80032fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	b672      	cpsid	i
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	b662      	cpsie	i
 80032f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80032fe:	f001 fbad 	bl	8004a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	441a      	add	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	3b01      	subs	r3, #1
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	441a      	add	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01a      	beq.n	8003392 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3310      	adds	r3, #16
 8003360:	4618      	mov	r0, r3
 8003362:	f000 ff9d 	bl	80042a0 <xTaskRemoveFromEventList>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <xQueueGenericReset+0xd0>)
 800336e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	e009      	b.n	8003392 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3310      	adds	r3, #16
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fef0 	bl	8003168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3324      	adds	r3, #36	; 0x24
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff feeb 	bl	8003168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003392:	f001 fb97 	bl	8004ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003396:	2301      	movs	r3, #1
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10c      	bne.n	80033d2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	b672      	cpsid	i
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	b662      	cpsie	i
 80033cc:	613b      	str	r3, [r7, #16]
}
 80033ce:	bf00      	nop
 80033d0:	e7fe      	b.n	80033d0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e004      	b.n	80033e8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3348      	adds	r3, #72	; 0x48
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fc1d 	bl	8004c2c <pvPortMalloc>
 80033f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d011      	beq.n	800341e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3348      	adds	r3, #72	; 0x48
 8003402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800340c:	79fa      	ldrb	r2, [r7, #7]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f805 	bl	8003428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800341e:	69bb      	ldr	r3, [r7, #24]
	}
 8003420:	4618      	mov	r0, r3
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e002      	b.n	800344a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003456:	2101      	movs	r1, #1
 8003458:	69b8      	ldr	r0, [r7, #24]
 800345a:	f7ff ff39 	bl	80032d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08e      	sub	sp, #56	; 0x38
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <xQueueGenericSend+0x36>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	b672      	cpsid	i
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	b662      	cpsie	i
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <xQueueGenericSend+0x44>
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <xQueueGenericSend+0x48>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <xQueueGenericSend+0x4a>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <xQueueGenericSend+0x68>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	b672      	cpsid	i
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	b662      	cpsie	i
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <xQueueGenericSend+0x76>
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericSend+0x7a>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericSend+0x7c>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10c      	bne.n	8003502 <xQueueGenericSend+0x9a>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	b672      	cpsid	i
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	b662      	cpsie	i
 80034fc:	623b      	str	r3, [r7, #32]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003502:	f001 f891 	bl	8004628 <xTaskGetSchedulerState>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xQueueGenericSend+0xaa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <xQueueGenericSend+0xae>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueGenericSend+0xb0>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10c      	bne.n	8003536 <xQueueGenericSend+0xce>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	b672      	cpsid	i
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	b662      	cpsie	i
 8003530:	61fb      	str	r3, [r7, #28]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003536:	f001 fa91 	bl	8004a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <xQueueGenericSend+0xe4>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d129      	bne.n	80035a0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003552:	f000 f975 	bl	8003840 <prvCopyDataToQueue>
 8003556:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	3324      	adds	r3, #36	; 0x24
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fe9b 	bl	80042a0 <xTaskRemoveFromEventList>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003570:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <xQueueGenericSend+0x208>)
 8003572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	e00a      	b.n	8003598 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003588:	4b39      	ldr	r3, [pc, #228]	; (8003670 <xQueueGenericSend+0x208>)
 800358a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003598:	f001 fa94 	bl	8004ac4 <vPortExitCritical>
				return pdPASS;
 800359c:	2301      	movs	r3, #1
 800359e:	e063      	b.n	8003668 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a6:	f001 fa8d 	bl	8004ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e05c      	b.n	8003668 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fed5 	bl	8004368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035be:	2301      	movs	r3, #1
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c2:	f001 fa7f 	bl	8004ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c6:	f000 fc81 	bl	8003ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035ca:	f001 fa47 	bl	8004a5c <vPortEnterCritical>
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d103      	bne.n	80035e4 <xQueueGenericSend+0x17c>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSend+0x192>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fa:	f001 fa63 	bl	8004ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035fe:	1d3a      	adds	r2, r7, #4
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fec4 	bl	8004394 <xTaskCheckForTimeOut>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d124      	bne.n	800365c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003614:	f000 fa0c 	bl	8003a30 <prvIsQueueFull>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	3310      	adds	r3, #16
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fe14 	bl	8004254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800362c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362e:	f000 f997 	bl	8003960 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003632:	f000 fc59 	bl	8003ee8 <xTaskResumeAll>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f47f af7c 	bne.w	8003536 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <xQueueGenericSend+0x208>)
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	e772      	b.n	8003536 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003652:	f000 f985 	bl	8003960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003656:	f000 fc47 	bl	8003ee8 <xTaskResumeAll>
 800365a:	e76c      	b.n	8003536 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800365c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800365e:	f000 f97f 	bl	8003960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003662:	f000 fc41 	bl	8003ee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003668:	4618      	mov	r0, r3
 800366a:	3738      	adds	r7, #56	; 0x38
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <xQueueReceive+0x34>
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	b672      	cpsid	i
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	b662      	cpsie	i
 80036a2:	623b      	str	r3, [r7, #32]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <xQueueReceive+0x42>
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <xQueueReceive+0x46>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueReceive+0x48>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10c      	bne.n	80036da <xQueueReceive+0x66>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	b672      	cpsid	i
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	b662      	cpsie	i
 80036d4:	61fb      	str	r3, [r7, #28]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036da:	f000 ffa5 	bl	8004628 <xTaskGetSchedulerState>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <xQueueReceive+0x76>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <xQueueReceive+0x7a>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <xQueueReceive+0x7c>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10c      	bne.n	800370e <xQueueReceive+0x9a>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	b672      	cpsid	i
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	b662      	cpsie	i
 8003708:	61bb      	str	r3, [r7, #24]
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800370e:	f001 f9a5 	bl	8004a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01f      	beq.n	800375e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003722:	f000 f8f7 	bl	8003914 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	3310      	adds	r3, #16
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fdb0 	bl	80042a0 <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <xQueueReceive+0x1c8>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003756:	f001 f9b5 	bl	8004ac4 <vPortExitCritical>
				return pdPASS;
 800375a:	2301      	movs	r3, #1
 800375c:	e069      	b.n	8003832 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003764:	f001 f9ae 	bl	8004ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003768:	2300      	movs	r3, #0
 800376a:	e062      	b.n	8003832 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fdf6 	bl	8004368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003780:	f001 f9a0 	bl	8004ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003784:	f000 fba2 	bl	8003ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003788:	f001 f968 	bl	8004a5c <vPortEnterCritical>
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d103      	bne.n	80037a2 <xQueueReceive+0x12e>
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d103      	bne.n	80037b8 <xQueueReceive+0x144>
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b8:	f001 f984 	bl	8004ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037bc:	1d3a      	adds	r2, r7, #4
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fde5 	bl	8004394 <xTaskCheckForTimeOut>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d123      	bne.n	8003818 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d2:	f000 f917 	bl	8003a04 <prvIsQueueEmpty>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd35 	bl	8004254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ec:	f000 f8b8 	bl	8003960 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f0:	f000 fb7a 	bl	8003ee8 <xTaskResumeAll>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d189      	bne.n	800370e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <xQueueReceive+0x1c8>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e780      	b.n	800370e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f8a7 	bl	8003960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003812:	f000 fb69 	bl	8003ee8 <xTaskResumeAll>
 8003816:	e77a      	b.n	800370e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381a:	f000 f8a1 	bl	8003960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800381e:	f000 fb63 	bl	8003ee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003824:	f000 f8ee 	bl	8003a04 <prvIsQueueEmpty>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	f43f af6f 	beq.w	800370e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003832:	4618      	mov	r0, r3
 8003834:	3730      	adds	r7, #48	; 0x30
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d14d      	bne.n	8003902 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fefa 	bl	8004664 <xTaskPriorityDisinherit>
 8003870:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e043      	b.n	8003902 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d119      	bne.n	80038b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6858      	ldr	r0, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	461a      	mov	r2, r3
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	f001 fbd6 	bl	800503c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	441a      	add	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d32b      	bcc.n	8003902 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	e026      	b.n	8003902 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68d8      	ldr	r0, [r3, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	461a      	mov	r2, r3
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	f001 fbbc 	bl	800503c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	425b      	negs	r3, r3
 80038ce:	441a      	add	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	425b      	negs	r3, r3
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d105      	bne.n	8003902 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	3b01      	subs	r3, #1
 8003900:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800390a:	697b      	ldr	r3, [r7, #20]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	441a      	add	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d303      	bcc.n	8003948 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68d9      	ldr	r1, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	461a      	mov	r2, r3
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f001 fb72 	bl	800503c <memcpy>
	}
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003968:	f001 f878 	bl	8004a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003972:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003974:	e011      	b.n	800399a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d012      	beq.n	80039a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fc8c 	bl	80042a0 <xTaskRemoveFromEventList>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800398e:	f000 fd67 	bl	8004460 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	3b01      	subs	r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	dce9      	bgt.n	8003976 <prvUnlockQueue+0x16>
 80039a2:	e000      	b.n	80039a6 <prvUnlockQueue+0x46>
					break;
 80039a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039ae:	f001 f889 	bl	8004ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039b2:	f001 f853 	bl	8004a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039be:	e011      	b.n	80039e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d012      	beq.n	80039ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3310      	adds	r3, #16
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fc67 	bl	80042a0 <xTaskRemoveFromEventList>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039d8:	f000 fd42 	bl	8004460 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039dc:	7bbb      	ldrb	r3, [r7, #14]
 80039de:	3b01      	subs	r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	dce9      	bgt.n	80039c0 <prvUnlockQueue+0x60>
 80039ec:	e000      	b.n	80039f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039f8:	f001 f864 	bl	8004ac4 <vPortExitCritical>
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a0c:	f001 f826 	bl	8004a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e001      	b.n	8003a22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a22:	f001 f84f 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a38:	f001 f810 	bl	8004a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d102      	bne.n	8003a4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e001      	b.n	8003a52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a52:	f001 f837 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	; 0x38
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10c      	bne.n	8003a8e <xTaskCreateStatic+0x2e>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	b672      	cpsid	i
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	b662      	cpsie	i
 8003a88:	623b      	str	r3, [r7, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <xTaskCreateStatic+0x4e>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	b672      	cpsid	i
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	b662      	cpsie	i
 8003aa8:	61fb      	str	r3, [r7, #28]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aae:	2354      	movs	r3, #84	; 0x54
 8003ab0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b54      	cmp	r3, #84	; 0x54
 8003ab6:	d00c      	beq.n	8003ad2 <xTaskCreateStatic+0x72>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	b672      	cpsid	i
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	b662      	cpsie	i
 8003acc:	61bb      	str	r3, [r7, #24]
}
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ad2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01e      	beq.n	8003b18 <xTaskCreateStatic+0xb8>
 8003ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003af2:	2300      	movs	r3, #0
 8003af4:	9303      	str	r3, [sp, #12]
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	9302      	str	r3, [sp, #8]
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f850 	bl	8003bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b12:	f000 f8d7 	bl	8003cc4 <prvAddNewTaskToReadyList>
 8003b16:	e001      	b.n	8003b1c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b1c:	697b      	ldr	r3, [r7, #20]
	}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3728      	adds	r7, #40	; 0x28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b08c      	sub	sp, #48	; 0x30
 8003b2a:	af04      	add	r7, sp, #16
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f876 	bl	8004c2c <pvPortMalloc>
 8003b40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b48:	2054      	movs	r0, #84	; 0x54
 8003b4a:	f001 f86f 	bl	8004c2c <pvPortMalloc>
 8003b4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5c:	e005      	b.n	8003b6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f001 f92e 	bl	8004dc0 <vPortFree>
 8003b64:	e001      	b.n	8003b6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b78:	88fa      	ldrh	r2, [r7, #6]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	9302      	str	r3, [sp, #8]
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f80e 	bl	8003bb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b94:	69f8      	ldr	r0, [r7, #28]
 8003b96:	f000 f895 	bl	8003cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e002      	b.n	8003ba6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003bc8:	440b      	add	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f023 0307 	bic.w	r3, r3, #7
 8003bd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	b672      	cpsid	i
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	b662      	cpsie	i
 8003bf6:	617b      	str	r3, [r7, #20]
}
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01f      	beq.n	8003c42 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e012      	b.n	8003c2e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	7819      	ldrb	r1, [r3, #0]
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	3334      	adds	r3, #52	; 0x34
 8003c18:	460a      	mov	r2, r1
 8003c1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d9e9      	bls.n	8003c08 <prvInitialiseNewTask+0x58>
 8003c34:	e000      	b.n	8003c38 <prvInitialiseNewTask+0x88>
			{
				break;
 8003c36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c40:	e003      	b.n	8003c4a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d901      	bls.n	8003c54 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c50:	2306      	movs	r3, #6
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fa9c 	bl	80031a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	3318      	adds	r3, #24
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fa97 	bl	80031a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	f1c3 0207 	rsb	r2, r3, #7
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	2200      	movs	r2, #0
 8003c94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	69b8      	ldr	r0, [r7, #24]
 8003ca4:	f000 fdce 	bl	8004844 <pxPortInitialiseStack>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cba:	bf00      	nop
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ccc:	f000 fec6 	bl	8004a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <prvAddNewTaskToReadyList+0xb8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <prvAddNewTaskToReadyList+0xb8>)
 8003cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <prvAddNewTaskToReadyList+0xbc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ce2:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <prvAddNewTaskToReadyList+0xbc>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ce8:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <prvAddNewTaskToReadyList+0xb8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d110      	bne.n	8003d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cf0:	f000 fbda 	bl	80044a8 <prvInitialiseTaskLists>
 8003cf4:	e00d      	b.n	8003d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <prvAddNewTaskToReadyList+0xc0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <prvAddNewTaskToReadyList+0xbc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d802      	bhi.n	8003d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <prvAddNewTaskToReadyList+0xbc>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d12:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <prvAddNewTaskToReadyList+0xc4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <prvAddNewTaskToReadyList+0xc4>)
 8003d1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2201      	movs	r2, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <prvAddNewTaskToReadyList+0xc8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <prvAddNewTaskToReadyList+0xc8>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <prvAddNewTaskToReadyList+0xcc>)
 8003d3c:	441a      	add	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7ff fa3c 	bl	80031c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d4a:	f000 febb 	bl	8004ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <prvAddNewTaskToReadyList+0xc0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <prvAddNewTaskToReadyList+0xbc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d207      	bcs.n	8003d74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <prvAddNewTaskToReadyList+0xd0>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000037c 	.word	0x2000037c
 8003d80:	2000027c 	.word	0x2000027c
 8003d84:	20000388 	.word	0x20000388
 8003d88:	20000398 	.word	0x20000398
 8003d8c:	20000384 	.word	0x20000384
 8003d90:	20000280 	.word	0x20000280
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d019      	beq.n	8003dde <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <vTaskDelay+0x64>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <vTaskDelay+0x34>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	b672      	cpsid	i
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	b662      	cpsie	i
 8003dc6:	60bb      	str	r3, [r7, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003dcc:	f000 f87e 	bl	8003ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fcd0 	bl	8004778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dd8:	f000 f886 	bl	8003ee8 <xTaskResumeAll>
 8003ddc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <vTaskDelay+0x68>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200003a4 	.word	0x200003a4
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e12:	463a      	mov	r2, r7
 8003e14:	1d39      	adds	r1, r7, #4
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fa10 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	9202      	str	r2, [sp, #8]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	460a      	mov	r2, r1
 8003e32:	4920      	ldr	r1, [pc, #128]	; (8003eb4 <vTaskStartScheduler+0xb0>)
 8003e34:	4820      	ldr	r0, [pc, #128]	; (8003eb8 <vTaskStartScheduler+0xb4>)
 8003e36:	f7ff fe13 	bl	8003a60 <xTaskCreateStatic>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <vTaskStartScheduler+0xb8>)
 8003e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <vTaskStartScheduler+0xb8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e001      	b.n	8003e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d118      	bne.n	8003e8a <vTaskStartScheduler+0x86>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	b672      	cpsid	i
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	b662      	cpsie	i
 8003e6c:	613b      	str	r3, [r7, #16]
}
 8003e6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <vTaskStartScheduler+0xbc>)
 8003e72:	f04f 32ff 	mov.w	r2, #4294967295
 8003e76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <vTaskStartScheduler+0xc0>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <vTaskStartScheduler+0xc4>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e84:	f000 fd6c 	bl	8004960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e88:	e010      	b.n	8003eac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d10c      	bne.n	8003eac <vTaskStartScheduler+0xa8>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	b672      	cpsid	i
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	b662      	cpsie	i
 8003ea6:	60fb      	str	r3, [r7, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <vTaskStartScheduler+0xa6>
}
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	080050a0 	.word	0x080050a0
 8003eb8:	08004479 	.word	0x08004479
 8003ebc:	200003a0 	.word	0x200003a0
 8003ec0:	2000039c 	.word	0x2000039c
 8003ec4:	20000388 	.word	0x20000388
 8003ec8:	20000380 	.word	0x20000380

08003ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <vTaskSuspendAll+0x18>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a03      	ldr	r2, [pc, #12]	; (8003ee4 <vTaskSuspendAll+0x18>)
 8003ed8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	200003a4 	.word	0x200003a4

08003ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ef6:	4b42      	ldr	r3, [pc, #264]	; (8004000 <xTaskResumeAll+0x118>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10c      	bne.n	8003f18 <xTaskResumeAll+0x30>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	b672      	cpsid	i
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	b662      	cpsie	i
 8003f12:	603b      	str	r3, [r7, #0]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f18:	f000 fda0 	bl	8004a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f1c:	4b38      	ldr	r3, [pc, #224]	; (8004000 <xTaskResumeAll+0x118>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	4a37      	ldr	r2, [pc, #220]	; (8004000 <xTaskResumeAll+0x118>)
 8003f24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <xTaskResumeAll+0x118>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d161      	bne.n	8003ff2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f2e:	4b35      	ldr	r3, [pc, #212]	; (8004004 <xTaskResumeAll+0x11c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d05d      	beq.n	8003ff2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f36:	e02e      	b.n	8003f96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f38:	4b33      	ldr	r3, [pc, #204]	; (8004008 <xTaskResumeAll+0x120>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3318      	adds	r3, #24
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f999 	bl	800327c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f994 	bl	800327c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	; (800400c <xTaskResumeAll+0x124>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <xTaskResumeAll+0x124>)
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a27      	ldr	r2, [pc, #156]	; (8004010 <xTaskResumeAll+0x128>)
 8003f74:	441a      	add	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7ff f920 	bl	80031c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	4b23      	ldr	r3, [pc, #140]	; (8004014 <xTaskResumeAll+0x12c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <xTaskResumeAll+0x130>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <xTaskResumeAll+0x120>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1cc      	bne.n	8003f38 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fa4:	f000 fb20 	bl	80045e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <xTaskResumeAll+0x134>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d010      	beq.n	8003fd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fb4:	f000 f836 	bl	8004024 <xTaskIncrementTick>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003fbe:	4b16      	ldr	r3, [pc, #88]	; (8004018 <xTaskResumeAll+0x130>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f1      	bne.n	8003fb4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <xTaskResumeAll+0x134>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <xTaskResumeAll+0x130>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <xTaskResumeAll+0x138>)
 8003fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ff2:	f000 fd67 	bl	8004ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200003a4 	.word	0x200003a4
 8004004:	2000037c 	.word	0x2000037c
 8004008:	2000033c 	.word	0x2000033c
 800400c:	20000384 	.word	0x20000384
 8004010:	20000280 	.word	0x20000280
 8004014:	2000027c 	.word	0x2000027c
 8004018:	20000390 	.word	0x20000390
 800401c:	2000038c 	.word	0x2000038c
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402e:	4b4f      	ldr	r3, [pc, #316]	; (800416c <xTaskIncrementTick+0x148>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 808a 	bne.w	800414c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004038:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <xTaskIncrementTick+0x14c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3301      	adds	r3, #1
 800403e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004040:	4a4b      	ldr	r2, [pc, #300]	; (8004170 <xTaskIncrementTick+0x14c>)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d122      	bne.n	8004092 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800404c:	4b49      	ldr	r3, [pc, #292]	; (8004174 <xTaskIncrementTick+0x150>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	b672      	cpsid	i
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	b662      	cpsie	i
 800406a:	603b      	str	r3, [r7, #0]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <xTaskIncrementTick+0x4a>
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <xTaskIncrementTick+0x150>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b40      	ldr	r3, [pc, #256]	; (8004178 <xTaskIncrementTick+0x154>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3e      	ldr	r2, [pc, #248]	; (8004174 <xTaskIncrementTick+0x150>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4a3e      	ldr	r2, [pc, #248]	; (8004178 <xTaskIncrementTick+0x154>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <xTaskIncrementTick+0x158>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a3c      	ldr	r2, [pc, #240]	; (800417c <xTaskIncrementTick+0x158>)
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	f000 faab 	bl	80045e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <xTaskIncrementTick+0x15c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d348      	bcc.n	800412e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <xTaskIncrementTick+0x150>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <xTaskIncrementTick+0x15c>)
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ac:	601a      	str	r2, [r3, #0]
					break;
 80040ae:	e03e      	b.n	800412e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b30      	ldr	r3, [pc, #192]	; (8004174 <xTaskIncrementTick+0x150>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d203      	bcs.n	80040d0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c8:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <xTaskIncrementTick+0x15c>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040ce:	e02e      	b.n	800412e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f8d1 	bl	800327c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff f8c8 	bl	800327c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <xTaskIncrementTick+0x160>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <xTaskIncrementTick+0x160>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <xTaskIncrementTick+0x164>)
 800410c:	441a      	add	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7ff f854 	bl	80031c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <xTaskIncrementTick+0x168>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d3b9      	bcc.n	800409c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412c:	e7b6      	b.n	800409c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <xTaskIncrementTick+0x168>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4914      	ldr	r1, [pc, #80]	; (8004188 <xTaskIncrementTick+0x164>)
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d907      	bls.n	8004156 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004146:	2301      	movs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e004      	b.n	8004156 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <xTaskIncrementTick+0x16c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <xTaskIncrementTick+0x16c>)
 8004154:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <xTaskIncrementTick+0x170>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800415e:	2301      	movs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200003a4 	.word	0x200003a4
 8004170:	20000380 	.word	0x20000380
 8004174:	20000334 	.word	0x20000334
 8004178:	20000338 	.word	0x20000338
 800417c:	20000394 	.word	0x20000394
 8004180:	2000039c 	.word	0x2000039c
 8004184:	20000384 	.word	0x20000384
 8004188:	20000280 	.word	0x20000280
 800418c:	2000027c 	.word	0x2000027c
 8004190:	2000038c 	.word	0x2000038c
 8004194:	20000390 	.word	0x20000390

08004198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419e:	4b28      	ldr	r3, [pc, #160]	; (8004240 <vTaskSwitchContext+0xa8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a6:	4b27      	ldr	r3, [pc, #156]	; (8004244 <vTaskSwitchContext+0xac>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041ac:	e041      	b.n	8004232 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80041ae:	4b25      	ldr	r3, [pc, #148]	; (8004244 <vTaskSwitchContext+0xac>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <vTaskSwitchContext+0xb0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	f1c3 031f 	rsb	r3, r3, #31
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	4920      	ldr	r1, [pc, #128]	; (800424c <vTaskSwitchContext+0xb4>)
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <vTaskSwitchContext+0x60>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	b672      	cpsid	i
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	b662      	cpsie	i
 80041f2:	607b      	str	r3, [r7, #4]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <vTaskSwitchContext+0x5e>
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <vTaskSwitchContext+0xb4>)
 8004204:	4413      	add	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3308      	adds	r3, #8
 800421a:	429a      	cmp	r2, r3
 800421c:	d104      	bne.n	8004228 <vTaskSwitchContext+0x90>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4a08      	ldr	r2, [pc, #32]	; (8004250 <vTaskSwitchContext+0xb8>)
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	200003a4 	.word	0x200003a4
 8004244:	20000390 	.word	0x20000390
 8004248:	20000384 	.word	0x20000384
 800424c:	20000280 	.word	0x20000280
 8004250:	2000027c 	.word	0x2000027c

08004254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10c      	bne.n	800427e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	b672      	cpsid	i
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	b662      	cpsie	i
 8004278:	60fb      	str	r3, [r7, #12]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <vTaskPlaceOnEventList+0x48>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3318      	adds	r3, #24
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe ffbf 	bl	800320a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800428c:	2101      	movs	r1, #1
 800428e:	6838      	ldr	r0, [r7, #0]
 8004290:	f000 fa72 	bl	8004778 <prvAddCurrentTaskToDelayedList>
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	2000027c 	.word	0x2000027c

080042a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	b672      	cpsid	i
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	b662      	cpsie	i
 80042ca:	60fb      	str	r3, [r7, #12]
}
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	3318      	adds	r3, #24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe ffd1 	bl	800327c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <xTaskRemoveFromEventList+0xb0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11c      	bne.n	800431c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe ffc8 	bl	800327c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2201      	movs	r2, #1
 80042f2:	409a      	lsls	r2, r3
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <xTaskRemoveFromEventList+0xb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <xTaskRemoveFromEventList+0xb4>)
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <xTaskRemoveFromEventList+0xb8>)
 800430c:	441a      	add	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe ff54 	bl	80031c2 <vListInsertEnd>
 800431a:	e005      	b.n	8004328 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3318      	adds	r3, #24
 8004320:	4619      	mov	r1, r3
 8004322:	480e      	ldr	r0, [pc, #56]	; (800435c <xTaskRemoveFromEventList+0xbc>)
 8004324:	f7fe ff4d 	bl	80031c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <xTaskRemoveFromEventList+0xc0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	429a      	cmp	r2, r3
 8004334:	d905      	bls.n	8004342 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <xTaskRemoveFromEventList+0xc4>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	e001      	b.n	8004346 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004346:	697b      	ldr	r3, [r7, #20]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200003a4 	.word	0x200003a4
 8004354:	20000384 	.word	0x20000384
 8004358:	20000280 	.word	0x20000280
 800435c:	2000033c 	.word	0x2000033c
 8004360:	2000027c 	.word	0x2000027c
 8004364:	20000390 	.word	0x20000390

08004368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <vTaskInternalSetTimeOutState+0x24>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <vTaskInternalSetTimeOutState+0x28>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	605a      	str	r2, [r3, #4]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20000394 	.word	0x20000394
 8004390:	20000380 	.word	0x20000380

08004394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10c      	bne.n	80043be <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	b672      	cpsid	i
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	b662      	cpsie	i
 80043b8:	613b      	str	r3, [r7, #16]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	b672      	cpsid	i
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	b662      	cpsie	i
 80043d8:	60fb      	str	r3, [r7, #12]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80043de:	f000 fb3d 	bl	8004a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <xTaskCheckForTimeOut+0xc4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d102      	bne.n	8004402 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e023      	b.n	800444a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <xTaskCheckForTimeOut+0xc8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d007      	beq.n	800441e <xTaskCheckForTimeOut+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004418:	2301      	movs	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e015      	b.n	800444a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	d20b      	bcs.n	8004440 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ff97 	bl	8004368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e004      	b.n	800444a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800444a:	f000 fb3b 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 800444e:	69fb      	ldr	r3, [r7, #28]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000380 	.word	0x20000380
 800445c:	20000394 	.word	0x20000394

08004460 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <vTaskMissedYield+0x14>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	20000390 	.word	0x20000390

08004478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004480:	f000 f852 	bl	8004528 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <prvIdleTask+0x28>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d9f9      	bls.n	8004480 <prvIdleTask+0x8>
			{
				taskYIELD();
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <prvIdleTask+0x2c>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800449c:	e7f0      	b.n	8004480 <prvIdleTask+0x8>
 800449e:	bf00      	nop
 80044a0:	20000280 	.word	0x20000280
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	e00c      	b.n	80044ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <prvInitialiseTaskLists+0x60>)
 80044c0:	4413      	add	r3, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fe50 	bl	8003168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d9ef      	bls.n	80044b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044d4:	480d      	ldr	r0, [pc, #52]	; (800450c <prvInitialiseTaskLists+0x64>)
 80044d6:	f7fe fe47 	bl	8003168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044da:	480d      	ldr	r0, [pc, #52]	; (8004510 <prvInitialiseTaskLists+0x68>)
 80044dc:	f7fe fe44 	bl	8003168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044e0:	480c      	ldr	r0, [pc, #48]	; (8004514 <prvInitialiseTaskLists+0x6c>)
 80044e2:	f7fe fe41 	bl	8003168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044e6:	480c      	ldr	r0, [pc, #48]	; (8004518 <prvInitialiseTaskLists+0x70>)
 80044e8:	f7fe fe3e 	bl	8003168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044ec:	480b      	ldr	r0, [pc, #44]	; (800451c <prvInitialiseTaskLists+0x74>)
 80044ee:	f7fe fe3b 	bl	8003168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <prvInitialiseTaskLists+0x78>)
 80044f4:	4a05      	ldr	r2, [pc, #20]	; (800450c <prvInitialiseTaskLists+0x64>)
 80044f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <prvInitialiseTaskLists+0x7c>)
 80044fa:	4a05      	ldr	r2, [pc, #20]	; (8004510 <prvInitialiseTaskLists+0x68>)
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000280 	.word	0x20000280
 800450c:	2000030c 	.word	0x2000030c
 8004510:	20000320 	.word	0x20000320
 8004514:	2000033c 	.word	0x2000033c
 8004518:	20000350 	.word	0x20000350
 800451c:	20000368 	.word	0x20000368
 8004520:	20000334 	.word	0x20000334
 8004524:	20000338 	.word	0x20000338

08004528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800452e:	e019      	b.n	8004564 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004530:	f000 fa94 	bl	8004a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <prvCheckTasksWaitingTermination+0x50>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fe9b 	bl	800327c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <prvCheckTasksWaitingTermination+0x54>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a0b      	ldr	r2, [pc, #44]	; (800457c <prvCheckTasksWaitingTermination+0x54>)
 800454e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <prvCheckTasksWaitingTermination+0x58>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3b01      	subs	r3, #1
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <prvCheckTasksWaitingTermination+0x58>)
 8004558:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800455a:	f000 fab3 	bl	8004ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f810 	bl	8004584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <prvCheckTasksWaitingTermination+0x58>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e1      	bne.n	8004530 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000350 	.word	0x20000350
 800457c:	2000037c 	.word	0x2000037c
 8004580:	20000364 	.word	0x20000364

08004584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fc10 	bl	8004dc0 <vPortFree>
				vPortFree( pxTCB );
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fc0d 	bl	8004dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045a6:	e01a      	b.n	80045de <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d103      	bne.n	80045ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fc04 	bl	8004dc0 <vPortFree>
	}
 80045b8:	e011      	b.n	80045de <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d00c      	beq.n	80045de <prvDeleteTCB+0x5a>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	b672      	cpsid	i
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	b662      	cpsie	i
 80045d8:	60fb      	str	r3, [r7, #12]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <prvDeleteTCB+0x58>
	}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <prvResetNextTaskUnblockTime+0x38>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <prvResetNextTaskUnblockTime+0x3c>)
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004600:	e008      	b.n	8004614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <prvResetNextTaskUnblockTime+0x38>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <prvResetNextTaskUnblockTime+0x3c>)
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000334 	.word	0x20000334
 8004624:	2000039c 	.word	0x2000039c

08004628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <xTaskGetSchedulerState+0x34>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004636:	2301      	movs	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e008      	b.n	800464e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <xTaskGetSchedulerState+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004644:	2302      	movs	r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800464e:	687b      	ldr	r3, [r7, #4]
	}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000388 	.word	0x20000388
 8004660:	200003a4 	.word	0x200003a4

08004664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d072      	beq.n	8004760 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800467a:	4b3c      	ldr	r3, [pc, #240]	; (800476c <xTaskPriorityDisinherit+0x108>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d00c      	beq.n	800469e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	b672      	cpsid	i
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	b662      	cpsie	i
 8004698:	60fb      	str	r3, [r7, #12]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	b672      	cpsid	i
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	b662      	cpsie	i
 80046ba:	60bb      	str	r3, [r7, #8]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	1e5a      	subs	r2, r3, #1
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d044      	beq.n	8004760 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d140      	bne.n	8004760 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fdca 	bl	800327c <uxListRemove>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d115      	bne.n	800471a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f2:	491f      	ldr	r1, [pc, #124]	; (8004770 <xTaskPriorityDisinherit+0x10c>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <xTaskPriorityDisinherit+0xb6>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <xTaskPriorityDisinherit+0x110>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4013      	ands	r3, r2
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <xTaskPriorityDisinherit+0x110>)
 8004718:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f1c3 0207 	rsb	r2, r3, #7
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	2201      	movs	r2, #1
 8004734:	409a      	lsls	r2, r3
 8004736:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <xTaskPriorityDisinherit+0x110>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	4a0d      	ldr	r2, [pc, #52]	; (8004774 <xTaskPriorityDisinherit+0x110>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <xTaskPriorityDisinherit+0x10c>)
 800474e:	441a      	add	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f7fe fd33 	bl	80031c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004760:	697b      	ldr	r3, [r7, #20]
	}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	2000027c 	.word	0x2000027c
 8004770:	20000280 	.word	0x20000280
 8004774:	20000384 	.word	0x20000384

08004778 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <prvAddCurrentTaskToDelayedList+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3304      	adds	r3, #4
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fd74 	bl	800327c <uxListRemove>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <prvAddCurrentTaskToDelayedList+0xb4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	2201      	movs	r2, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43da      	mvns	r2, r3
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4013      	ands	r3, r2
 80047ae:	4a20      	ldr	r2, [pc, #128]	; (8004830 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d10a      	bne.n	80047d0 <prvAddCurrentTaskToDelayedList+0x58>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	481a      	ldr	r0, [pc, #104]	; (8004834 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047ca:	f7fe fcfa 	bl	80031c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ce:	e026      	b.n	800481e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d209      	bcs.n	80047fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fd08 	bl	800320a <vListInsert>
}
 80047fa:	e010      	b.n	800481e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fc:	4b0f      	ldr	r3, [pc, #60]	; (800483c <prvAddCurrentTaskToDelayedList+0xc4>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fe fcfe 	bl	800320a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	d202      	bcs.n	800481e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <prvAddCurrentTaskToDelayedList+0xc8>)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000380 	.word	0x20000380
 800482c:	2000027c 	.word	0x2000027c
 8004830:	20000384 	.word	0x20000384
 8004834:	20000368 	.word	0x20000368
 8004838:	20000338 	.word	0x20000338
 800483c:	20000334 	.word	0x20000334
 8004840:	2000039c 	.word	0x2000039c

08004844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3b04      	subs	r3, #4
 8004854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800485c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3b04      	subs	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b04      	subs	r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004874:	4a0c      	ldr	r2, [pc, #48]	; (80048a8 <pxPortInitialiseStack+0x64>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b14      	subs	r3, #20
 800487e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b04      	subs	r3, #4
 800488a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f06f 0202 	mvn.w	r2, #2
 8004892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3b20      	subs	r3, #32
 8004898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	080048ad 	.word	0x080048ad

080048ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <prvTaskExitError+0x5c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d00c      	beq.n	80048da <prvTaskExitError+0x2e>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	b672      	cpsid	i
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	b662      	cpsie	i
 80048d4:	60fb      	str	r3, [r7, #12]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <prvTaskExitError+0x2c>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	b672      	cpsid	i
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	b662      	cpsie	i
 80048ee:	60bb      	str	r3, [r7, #8]
}
 80048f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048f2:	bf00      	nop
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0fc      	beq.n	80048f4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000004 	.word	0x20000004
 800490c:	00000000 	.word	0x00000000

08004910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <pxCurrentTCBConst2>)
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	6808      	ldr	r0, [r1, #0]
 8004916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	f380 8809 	msr	PSP, r0
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8811 	msr	BASEPRI, r0
 800492a:	4770      	bx	lr
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst2>:
 8004930:	2000027c 	.word	0x2000027c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004938:	4808      	ldr	r0, [pc, #32]	; (800495c <prvPortStartFirstTask+0x24>)
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f380 8808 	msr	MSP, r0
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8814 	msr	CONTROL, r0
 800494a:	b662      	cpsie	i
 800494c:	b661      	cpsie	f
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	df00      	svc	0
 8004958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800495a:	bf00      	nop
 800495c:	e000ed08 	.word	0xe000ed08

08004960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <xPortStartScheduler+0xe4>)
 8004968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <xPortStartScheduler+0xe8>)
 800498c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <xPortStartScheduler+0xec>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004994:	e009      	b.n	80049aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004996:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <xPortStartScheduler+0xec>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <xPortStartScheduler+0xec>)
 800499e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d0ef      	beq.n	8004996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049b6:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <xPortStartScheduler+0xec>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1c3 0307 	rsb	r3, r3, #7
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d00c      	beq.n	80049dc <xPortStartScheduler+0x7c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	b672      	cpsid	i
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	b662      	cpsie	i
 80049d6:	60bb      	str	r3, [r7, #8]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <xPortStartScheduler+0xec>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <xPortStartScheduler+0xec>)
 80049e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049e6:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <xPortStartScheduler+0xec>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <xPortStartScheduler+0xec>)
 80049f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <xPortStartScheduler+0xf0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <xPortStartScheduler+0xf0>)
 8004a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <xPortStartScheduler+0xf0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <xPortStartScheduler+0xf0>)
 8004a0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a12:	f000 f8dd 	bl	8004bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <xPortStartScheduler+0xf4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a1c:	f000 f8fc 	bl	8004c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <xPortStartScheduler+0xf8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <xPortStartScheduler+0xf8>)
 8004a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a2c:	f7ff ff84 	bl	8004938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a30:	f7ff fbb2 	bl	8004198 <vTaskSwitchContext>
	prvTaskExitError();
 8004a34:	f7ff ff3a 	bl	80048ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000e400 	.word	0xe000e400
 8004a48:	200003a8 	.word	0x200003a8
 8004a4c:	200003ac 	.word	0x200003ac
 8004a50:	e000ed20 	.word	0xe000ed20
 8004a54:	20000004 	.word	0x20000004
 8004a58:	e000ef34 	.word	0xe000ef34

08004a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	b672      	cpsid	i
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	b662      	cpsie	i
 8004a76:	607b      	str	r3, [r7, #4]
}
 8004a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <vPortEnterCritical+0x60>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <vPortEnterCritical+0x60>)
 8004a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <vPortEnterCritical+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d111      	bne.n	8004ab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <vPortEnterCritical+0x64>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <vPortEnterCritical+0x54>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	b672      	cpsid	i
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	b662      	cpsie	i
 8004aaa:	603b      	str	r3, [r7, #0]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vPortEnterCritical+0x52>
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000004 	.word	0x20000004
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <vPortExitCritical+0x54>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <vPortExitCritical+0x28>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	b672      	cpsid	i
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	b662      	cpsie	i
 8004ae6:	607b      	str	r3, [r7, #4]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <vPortExitCritical+0x54>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <vPortExitCritical+0x54>)
 8004af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <vPortExitCritical+0x54>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <vPortExitCritical+0x46>
 8004afe:	2300      	movs	r3, #0
 8004b00:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000004 	.word	0x20000004
 8004b1c:	00000000 	.word	0x00000000

08004b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b20:	f3ef 8009 	mrs	r0, PSP
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <pxCurrentTCBConst>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f01e 0f10 	tst.w	lr, #16
 8004b30:	bf08      	it	eq
 8004b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b44:	b672      	cpsid	i
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	b662      	cpsie	i
 8004b54:	f7ff fb20 	bl	8004198 <vTaskSwitchContext>
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f380 8811 	msr	BASEPRI, r0
 8004b60:	bc09      	pop	{r0, r3}
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	f01e 0f10 	tst.w	lr, #16
 8004b6e:	bf08      	it	eq
 8004b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b74:	f380 8809 	msr	PSP, r0
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <pxCurrentTCBConst>:
 8004b80:	2000027c 	.word	0x2000027c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	b672      	cpsid	i
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	b662      	cpsie	i
 8004ba2:	607b      	str	r3, [r7, #4]
}
 8004ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ba6:	f7ff fa3d 	bl	8004024 <xTaskIncrementTick>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <xPortSysTickHandler+0x44>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f383 8811 	msr	BASEPRI, r3
}
 8004bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <vPortSetupTimerInterrupt+0x34>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <vPortSetupTimerInterrupt+0x38>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <vPortSetupTimerInterrupt+0x3c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <vPortSetupTimerInterrupt+0x40>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <vPortSetupTimerInterrupt+0x44>)
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bf2:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <vPortSetupTimerInterrupt+0x34>)
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	601a      	str	r2, [r3, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e010 	.word	0xe000e010
 8004c08:	e000e018 	.word	0xe000e018
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	10624dd3 	.word	0x10624dd3
 8004c14:	e000e014 	.word	0xe000e014

08004c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c28 <vPortEnableVFP+0x10>
 8004c1c:	6801      	ldr	r1, [r0, #0]
 8004c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c22:	6001      	str	r1, [r0, #0]
 8004c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c26:	bf00      	nop
 8004c28:	e000ed88 	.word	0xe000ed88

08004c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c38:	f7ff f948 	bl	8003ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <pvPortMalloc+0x180>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c44:	f000 f91a 	bl	8004e7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c48:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <pvPortMalloc+0x184>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 8092 	bne.w	8004d7a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01f      	beq.n	8004c9c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	3308      	adds	r3, #8
 8004c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <pvPortMalloc+0x70>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	b672      	cpsid	i
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	b662      	cpsie	i
 8004c96:	617b      	str	r3, [r7, #20]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d06b      	beq.n	8004d7a <pvPortMalloc+0x14e>
 8004ca2:	4b44      	ldr	r3, [pc, #272]	; (8004db4 <pvPortMalloc+0x188>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d866      	bhi.n	8004d7a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cac:	4b42      	ldr	r3, [pc, #264]	; (8004db8 <pvPortMalloc+0x18c>)
 8004cae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <pvPortMalloc+0x18c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cb6:	e004      	b.n	8004cc2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d903      	bls.n	8004cd4 <pvPortMalloc+0xa8>
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f1      	bne.n	8004cb8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cd4:	4b35      	ldr	r3, [pc, #212]	; (8004dac <pvPortMalloc+0x180>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d04d      	beq.n	8004d7a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d921      	bls.n	8004d44 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00c      	beq.n	8004d2c <pvPortMalloc+0x100>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	b672      	cpsid	i
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	b662      	cpsie	i
 8004d26:	613b      	str	r3, [r7, #16]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d3e:	69b8      	ldr	r0, [r7, #24]
 8004d40:	f000 f8fe 	bl	8004f40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <pvPortMalloc+0x188>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <pvPortMalloc+0x188>)
 8004d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d52:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <pvPortMalloc+0x188>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <pvPortMalloc+0x190>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d203      	bcs.n	8004d66 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <pvPortMalloc+0x188>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <pvPortMalloc+0x190>)
 8004d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <pvPortMalloc+0x184>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d7a:	f7ff f8b5 	bl	8003ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <pvPortMalloc+0x176>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	b672      	cpsid	i
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	b662      	cpsie	i
 8004d9c:	60fb      	str	r3, [r7, #12]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <pvPortMalloc+0x174>
	return pvReturn;
 8004da2:	69fb      	ldr	r3, [r7, #28]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3728      	adds	r7, #40	; 0x28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20003fb8 	.word	0x20003fb8
 8004db0:	20003fc4 	.word	0x20003fc4
 8004db4:	20003fbc 	.word	0x20003fbc
 8004db8:	20003fb0 	.word	0x20003fb0
 8004dbc:	20003fc0 	.word	0x20003fc0

08004dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d04c      	beq.n	8004e6c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	425b      	negs	r3, r3
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <vPortFree+0xb4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10c      	bne.n	8004e08 <vPortFree+0x48>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	b672      	cpsid	i
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	b662      	cpsie	i
 8004e02:	60fb      	str	r3, [r7, #12]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <vPortFree+0x6a>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	b672      	cpsid	i
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	b662      	cpsie	i
 8004e24:	60bb      	str	r3, [r7, #8]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <vPortFree+0xb4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d019      	beq.n	8004e6c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d115      	bne.n	8004e6c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <vPortFree+0xb4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e50:	f7ff f83c 	bl	8003ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <vPortFree+0xb8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <vPortFree+0xb8>)
 8004e60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f000 f86c 	bl	8004f40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e68:	f7ff f83e 	bl	8003ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20003fc4 	.word	0x20003fc4
 8004e78:	20003fbc 	.word	0x20003fbc

08004e7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e88:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <prvHeapInit+0xac>)
 8004e8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3307      	adds	r3, #7
 8004e9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <prvHeapInit+0xac>)
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <prvHeapInit+0xb0>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004eba:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <prvHeapInit+0xb0>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ec8:	2208      	movs	r2, #8
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0307 	bic.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <prvHeapInit+0xb4>)
 8004edc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ede:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <prvHeapInit+0xb4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <prvHeapInit+0xb4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <prvHeapInit+0xb4>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <prvHeapInit+0xb8>)
 8004f0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <prvHeapInit+0xbc>)
 8004f12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <prvHeapInit+0xc0>)
 8004f16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f1a:	601a      	str	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	200003b0 	.word	0x200003b0
 8004f2c:	20003fb0 	.word	0x20003fb0
 8004f30:	20003fb8 	.word	0x20003fb8
 8004f34:	20003fc0 	.word	0x20003fc0
 8004f38:	20003fbc 	.word	0x20003fbc
 8004f3c:	20003fc4 	.word	0x20003fc4

08004f40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f48:	4b28      	ldr	r3, [pc, #160]	; (8004fec <prvInsertBlockIntoFreeList+0xac>)
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e002      	b.n	8004f54 <prvInsertBlockIntoFreeList+0x14>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d8f7      	bhi.n	8004f4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	4413      	add	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d108      	bne.n	8004f82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	441a      	add	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d118      	bne.n	8004fc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d00d      	beq.n	8004fbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	441a      	add	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e008      	b.n	8004fd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e003      	b.n	8004fd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d002      	beq.n	8004fde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20003fb0 	.word	0x20003fb0
 8004ff0:	20003fb8 	.word	0x20003fb8

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4d0d      	ldr	r5, [pc, #52]	; (800502c <__libc_init_array+0x38>)
 8004ff8:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffa:	1b64      	subs	r4, r4, r5
 8004ffc:	10a4      	asrs	r4, r4, #2
 8004ffe:	2600      	movs	r6, #0
 8005000:	42a6      	cmp	r6, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	4d0b      	ldr	r5, [pc, #44]	; (8005034 <__libc_init_array+0x40>)
 8005006:	4c0c      	ldr	r4, [pc, #48]	; (8005038 <__libc_init_array+0x44>)
 8005008:	f000 f82e 	bl	8005068 <_init>
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	2600      	movs	r6, #0
 8005012:	42a6      	cmp	r6, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f855 3b04 	ldr.w	r3, [r5], #4
 800501c:	4798      	blx	r3
 800501e:	3601      	adds	r6, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f855 3b04 	ldr.w	r3, [r5], #4
 8005026:	4798      	blx	r3
 8005028:	3601      	adds	r6, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	080050fc 	.word	0x080050fc
 8005030:	080050fc 	.word	0x080050fc
 8005034:	080050fc 	.word	0x080050fc
 8005038:	08005100 	.word	0x08005100

0800503c <memcpy>:
 800503c:	440a      	add	r2, r1
 800503e:	4291      	cmp	r1, r2
 8005040:	f100 33ff 	add.w	r3, r0, #4294967295
 8005044:	d100      	bne.n	8005048 <memcpy+0xc>
 8005046:	4770      	bx	lr
 8005048:	b510      	push	{r4, lr}
 800504a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800504e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005052:	4291      	cmp	r1, r2
 8005054:	d1f9      	bne.n	800504a <memcpy+0xe>
 8005056:	bd10      	pop	{r4, pc}

08005058 <memset>:
 8005058:	4402      	add	r2, r0
 800505a:	4603      	mov	r3, r0
 800505c:	4293      	cmp	r3, r2
 800505e:	d100      	bne.n	8005062 <memset+0xa>
 8005060:	4770      	bx	lr
 8005062:	f803 1b01 	strb.w	r1, [r3], #1
 8005066:	e7f9      	b.n	800505c <memset+0x4>

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
